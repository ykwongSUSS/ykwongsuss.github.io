[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "This WebR website is created using Quarto. It is a collection of R snippets useful for my study of R.\nThe website, started in June 2024, is designed to maximize quick access to frequently asked materials. It is not a tutorial, more like a quick reference. R commands are usually indicated in the initial callouts.\nThe main chapters for this website are:\n\nDatatypes\nDataFrames\nggPlots\nDatasets\nReferences\n\nMore may be added later.\nThis introduction chapter has two other sections. The first section is a housekeeping section that document the YAML and Quarto configs used in this website. The third section describes the workflows for editing the website.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "rBasics/rBasics.html",
    "href": "rBasics/rBasics.html",
    "title": "R Basics",
    "section": "",
    "text": "data-types\ndataframes\nggplots\ntables"
  },
  {
    "objectID": "rBasics/rBasics.html#heading",
    "href": "rBasics/rBasics.html#heading",
    "title": "rBasics",
    "section": "",
    "text": "why dependencies?"
  },
  {
    "objectID": "rBasics/data-types/data-types.html",
    "href": "rBasics/data-types/data-types.html",
    "title": "data-types",
    "section": "",
    "text": "basic-types\n\n\nStrings\n\nstring-type\n\n\n\nFactors\n\nfct_inorder\nfactors-recode\n\n\n\nDates\n\ndates-lubridate\ndates-eeptools\n\n\n\nTables\n\ntables-frequency"
  },
  {
    "objectID": "rBasics/data-types/strings-manipulate.html",
    "href": "rBasics/data-types/strings-manipulate.html",
    "title": "String Manipulation with BaseR and stringr",
    "section": "",
    "text": "(stringr is part of tidyverse)\nlibrary(tidyverse)\n\ns0 &lt;- \"The quick agile fox jumps over the very lazy dog\"\ns0\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n\ns1 &lt;- str_trim(s0, side=\"both\")\ns1\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\""
  },
  {
    "objectID": "rBasics/data-types/strings-manipulate.html#paste",
    "href": "rBasics/data-types/strings-manipulate.html#paste",
    "title": "String Manipulation with BaseR and stringr",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\""
  },
  {
    "objectID": "rBasics/data-types/dates-eeptools.html",
    "href": "rBasics/data-types/dates-eeptools.html",
    "title": "dates-eeptools",
    "section": "",
    "text": "library(tidyverse) #includes lubridate, readr\nlibrary(eeptools)\n\ndf &lt;- read_csv(\"Name, dob\n               HANKS Tom, 1956-07-09\n               SANDLER Adam, 1966-09-09\n               SMITH Will, 1968-09-25\n               CUMBERBATCH Benedict, 1976-07-19\n               FOX Megan, 1986-05-16\n               STONE Emma, 1988-11-06\n               RADCLIFFE Daniel, 1989-07-23\n               STEWART Kirsten, 1990-04-09\n               WATSON Emma, 1990-04-15\n               \")\ndf$dob &lt;- as.Date(df$dob)\ntibble(df)\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf &lt;- arrange(df,-desc(dob))\ndf1&lt;- df %&gt;% mutate(age=age_calc(dob,units=\"years\")) %&gt;% \n             mutate(mth=month(dob))\ndf1$mth&lt;-month.abb[df1$mth]\ndf1\n\n# A tibble: 9 × 4\n  Name                 dob          age mth  \n  &lt;chr&gt;                &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 HANKS Tom            1956-07-09  68.0 Jul  \n2 SANDLER Adam         1966-09-09  57.9 Sep  \n3 SMITH Will           1968-09-25  55.8 Sep  \n4 CUMBERBATCH Benedict 1976-07-19  48.0 Jul  \n5 FOX Megan            1986-05-16  38.2 May  \n6 STONE Emma           1988-11-06  35.7 Nov  \n7 RADCLIFFE Daniel     1989-07-23  35.0 Jul  \n8 STEWART Kirsten      1990-04-09  34.3 Apr  \n9 WATSON Emma          1990-04-15  34.3 Apr"
  },
  {
    "objectID": "rBasics/data-types/dates-eeptools.html#calculating-age-from-dates",
    "href": "rBasics/data-types/dates-eeptools.html#calculating-age-from-dates",
    "title": "dates-eeptools",
    "section": "",
    "text": "library(tidyverse) #includes lubridate, readr\nlibrary(eeptools)\n\ndf &lt;- read_csv(\"Name, dob\n               HANKS Tom, 1956-07-09\n               SANDLER Adam, 1966-09-09\n               SMITH Will, 1968-09-25\n               CUMBERBATCH Benedict, 1976-07-19\n               FOX Megan, 1986-05-16\n               STONE Emma, 1988-11-06\n               RADCLIFFE Daniel, 1989-07-23\n               STEWART Kirsten, 1990-04-09\n               WATSON Emma, 1990-04-15\n               \")\ndf$dob &lt;- as.Date(df$dob)\ntibble(df)\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf &lt;- arrange(df,-desc(dob))\ndf1&lt;- df %&gt;% mutate(age=age_calc(dob,units=\"years\")) %&gt;% \n             mutate(mth=month(dob))\ndf1$mth&lt;-month.abb[df1$mth]\ndf1\n\n# A tibble: 9 × 4\n  Name                 dob          age mth  \n  &lt;chr&gt;                &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 HANKS Tom            1956-07-09  68.0 Jul  \n2 SANDLER Adam         1966-09-09  57.9 Sep  \n3 SMITH Will           1968-09-25  55.8 Sep  \n4 CUMBERBATCH Benedict 1976-07-19  48.0 Jul  \n5 FOX Megan            1986-05-16  38.2 May  \n6 STONE Emma           1988-11-06  35.7 Nov  \n7 RADCLIFFE Daniel     1989-07-23  35.0 Jul  \n8 STEWART Kirsten      1990-04-09  34.3 Apr  \n9 WATSON Emma          1990-04-15  34.3 Apr"
  },
  {
    "objectID": "rBasics/data-types/r-types.html",
    "href": "rBasics/data-types/r-types.html",
    "title": "Basic Types in BaseR",
    "section": "",
    "text": "1. type: num\n\na &lt;- 2 + 3\ntypeof(a)\n\n[1] \"double\"\n\nb &lt;- 2.2 + 4\n\n\n\n2. type: chr\n(strings are represented as chr)\n\nc &lt;- c(\"I believe\")\nstr(c)\n\n chr \"I believe\"\n\nd &lt;- paste(\"I\",\"believe\")\nstr(d)\n\n chr \"I believe\"\n\n\n\n\n3. type: factor\n\ne &lt;- factor(c(\"head\",\"tail\"))\nstr(e)\n\n Factor w/ 2 levels \"head\",\"tail\": 1 2\n\n\n\n\n4. type: vector\n\nvec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6\n\n\n\ntype: vec-matrix\ntype: dataframe\n\n\n\n5. type: matrix\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4\n\n\n\n\n6. type: dataframe\n\nf &lt;- c(\"dogs\",\"cats\",\"gerbils\")\ng &lt;- c(3, 5, 8)\nh &lt;- data.frame(animal=f, num=g)\nh\n\n   animal num\n1    dogs   3\n2    cats   5\n3 gerbils   8\n\nstr(h)\n\n'data.frame':   3 obs. of  2 variables:\n $ animal: chr  \"dogs\" \"cats\" \"gerbils\"\n $ num   : num  3 5 8\n\n\n\n\n7. type: list\n\nfruitlist &lt;- list(\"apple\",\"cherry\",1024)\nfruitlist[1]\n\n[[1]]\n[1] \"apple\"\n\nstr(fruitlist)\n\nList of 3\n $ : chr \"apple\"\n $ : chr \"cherry\"\n $ : num 1024"
  },
  {
    "objectID": "rBasics/data-types/fct_inorder.html",
    "href": "rBasics/data-types/fct_inorder.html",
    "title": "fct_inorder",
    "section": "",
    "text": "Dataset\n\nlibrary(tidyverse)\ntb &lt;- tribble(\n  ~cancer, ~cases, ~sex,\n  \"Colorectal\", 66, \"M\",\n   \"Liver\", 29, \"M\",\n   \"Skin\", 21, \"M\",\n   \"Kidney\", 17, \"M\",\n   \"Colorectal\", 12, \"F\",\n   \"Skin\", 17, \"F\",\n)\ntb$cancer &lt;- tb$cancer |&gt; factor()\ntb$sex &lt;- tb$sex |&gt; factor()\ntb\n\n# A tibble: 6 × 3\n  cancer     cases sex  \n  &lt;fct&gt;      &lt;dbl&gt; &lt;fct&gt;\n1 Colorectal    66 M    \n2 Liver         29 M    \n3 Skin          21 M    \n4 Kidney        17 M    \n5 Colorectal    12 F    \n6 Skin          17 F    \n\n\n\n\n\n\n\n\nNote\n\n\n\nDefault levels are placed alphabetically. So if plotted on ggplot2, it is also place alphabetically. If you want to change the setting to follow “original” sequence in order, you use fct_inorder\n\n\n\nlevels(tb$cancer)\n\n[1] \"Colorectal\" \"Kidney\"     \"Liver\"      \"Skin\"      \n\ntb$cancer &lt;- fct_inorder(tb$cancer)\nlevels(tb$cancer)\n\n[1] \"Colorectal\" \"Liver\"      \"Skin\"       \"Kidney\"    \n\n\n\n\n\n\n\n\nNote\n\n\n\nThere’s also fct_inseq and fct_infreq (by number of observations with each level). They are found in the forcats package under tidyverse. Ref: https://forcats.tidyverse.org/reference/fct_inorder.html"
  },
  {
    "objectID": "rBasics/data-types/factors-recode.html",
    "href": "rBasics/data-types/factors-recode.html",
    "title": "factors-recode",
    "section": "",
    "text": "sch0 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\nsch0\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: NSHD SBIZ SHBS SLAW SST\n\n\n\nthe Levels default to an alphabetical sequence, but\nnow I want to list factors Levels by the order in which they first appear\nsch1 Levels will now follow the sequence of sch0 (i.e. SBIZ..)\n\n\nlibrary(tidyverse) #include forcats\nsch1 &lt;- fct_inorder(sch0)\nsch1\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nor I can re-factor sch0 again by making the Levels unique to sch0\n\n\nsch2 &lt;- factor(sch0, levels=unique(sch0))\nsch2\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nthirdly, you can factor and specify the order of Levels\n(which is probably the most direct way)\n\n\n  sch3 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"),\n                 levels=c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\n  sch3\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW"
  },
  {
    "objectID": "rBasics/data-types/factors-recode.html#ordering-of-factors",
    "href": "rBasics/data-types/factors-recode.html#ordering-of-factors",
    "title": "factors-recode",
    "section": "",
    "text": "sch0 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\nsch0\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: NSHD SBIZ SHBS SLAW SST\n\n\n\nthe Levels default to an alphabetical sequence, but\nnow I want to list factors Levels by the order in which they first appear\nsch1 Levels will now follow the sequence of sch0 (i.e. SBIZ..)\n\n\nlibrary(tidyverse) #include forcats\nsch1 &lt;- fct_inorder(sch0)\nsch1\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nor I can re-factor sch0 again by making the Levels unique to sch0\n\n\nsch2 &lt;- factor(sch0, levels=unique(sch0))\nsch2\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nthirdly, you can factor and specify the order of Levels\n(which is probably the most direct way)\n\n\n  sch3 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"),\n                 levels=c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\n  sch3\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW"
  },
  {
    "objectID": "rBasics/data-types/factors-recode.html#renaming-factors",
    "href": "rBasics/data-types/factors-recode.html#renaming-factors",
    "title": "factors-recode",
    "section": "2. Renaming Factors",
    "text": "2. Renaming Factors\n\ndf&lt;-tribble(\n~Dept, ~Views,\n\"Learning Systems and Applications\", 2349,\n\"Student Support\", 683,\n\"Student Support\", 697,\n\"Student Support\", 534,\n\"Teaching and Learning Center\",345,\n\"School of Humanities and Behavioral Sciences\",324,\n\"Digital Library Services\",223\n)\ndf\n\n# A tibble: 7 × 2\n  Dept                                         Views\n  &lt;chr&gt;                                        &lt;dbl&gt;\n1 Learning Systems and Applications             2349\n2 Student Support                                683\n3 Student Support                                697\n4 Student Support                                534\n5 Teaching and Learning Center                   345\n6 School of Humanities and Behavioral Sciences   324\n7 Digital Library Services                       223\n\n\n\ndf$Dept &lt;- as.factor(df$Dept) # change chr to factor\nlevels(df$Dept)\n\n[1] \"Digital Library Services\"                    \n[2] \"Learning Systems and Applications\"           \n[3] \"School of Humanities and Behavioral Sciences\"\n[4] \"Student Support\"                             \n[5] \"Teaching and Learning Center\"                \n\n\n\ndf$Dept &lt;- fct_recode(df$Dept,\n           DLS=\"Digital Library Services\",\n           LSA = \"Learning Systems and Applications\",\n           SHBS = \"School of Humanities and Behavioral Sciences\",\n           TLC = \"Teaching and Learning Center\",\n           SS = \"Student Support\")\ndf\n\n# A tibble: 7 × 2\n  Dept  Views\n  &lt;fct&gt; &lt;dbl&gt;\n1 LSA    2349\n2 SS      683\n3 SS      697\n4 SS      534\n5 TLC     345\n6 SHBS    324\n7 DLS     223\n\n\n\ndf$Dept\n\n[1] LSA  SS   SS   SS   TLC  SHBS DLS \nLevels: DLS LSA SHBS SS TLC"
  },
  {
    "objectID": "rBasics/data-types/dates-lubridate.html",
    "href": "rBasics/data-types/dates-lubridate.html",
    "title": "dates-lubridate",
    "section": "",
    "text": "1. Dealing with Dates\n\nBefore importing from Excel it is probably a good idea to custom-format in Excel the dates as yyyy-mm-dd (e.g. 2021-05-12). It will make things consistent and easier.\nUse library(rio) and import - it will ensure that the date format is kept.\nlibrary(lubridate) is part of tidyverse.\nUse `tibble`to check if Dates are recognized correctly before filtering\n\n\nlibrary(tidyverse)\nlibrary(rio)\n\ndf &lt;- import(\"../assets/Vaccines.csv\")\ntibble(df)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n2. Filtering rows based on Date\n\nfilter(df, Date&gt;=\"2021-02-02\" & Date &lt; \"2021-03-01\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n\n\n\nfilter(df, Date &gt; \"2021-01-31\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n4 2021-03-01  317715  207324\n5 2021-03-04  350000  215000"
  },
  {
    "objectID": "rBasics/data-types/tables-frequency.html",
    "href": "rBasics/data-types/tables-frequency.html",
    "title": "tables-frequency",
    "section": "",
    "text": "library(tidyverse)\n# fct_inorder is in tidyverse\n\nid&lt;- str_c(\"SD\",101:110,sep=\"\")\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdlevels &lt;- fct_inorder(c(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"D+\",\"D\",\"F\"))\ngender &lt;- factor(c(\"M\",\"F\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"M\",\"M\"))\n\nlgrades &lt;- factor(ltrgrades, levels=gdlevels)\ndf &lt;- tibble(id,gender, lgrades)\ndf\n\n# A tibble: 10 × 3\n   id    gender lgrades\n   &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n 1 SD101 M      C+     \n 2 SD102 F      F      \n 3 SD103 F      B      \n 4 SD104 F      A+     \n 5 SD105 M      B      \n 6 SD106 F      B-     \n 7 SD107 M      A      \n 8 SD108 M      C      \n 9 SD109 M      B-     \n10 SD110 M      B-     \n\n\n\n\n\n\n# use table function to count frequency in lgrades\ntab1 &lt;- table(df$lgrades) \ntab1\n\n\nA+  A A- B+  B B- C+  C D+  D  F \n 1  1  0  0  2  3  1  1  0  0  1 \n\n# redo table back into a dataframe\ndf2 &lt;- data.frame(tab1)\nnames(df2) &lt;- c(\"grades\",\"freq\")\ndf2\n\n   grades freq\n1      A+    1\n2       A    1\n3      A-    0\n4      B+    0\n5       B    2\n6      B-    3\n7      C+    1\n8       C    1\n9      D+    0\n10      D    0\n11      F    1\n\n\n\n\n\n\ntwoWay &lt;- table(df$gender,df$lgrades)\ntwoWay\n\n   \n    A+ A A- B+ B B- C+ C D+ D F\n  F  1 0  0  0 1  1  0 0  0 0 1\n  M  0 1  0  0 1  2  1 1  0 0 0\n\n\n\n\n\nfind those that have B-\n\nfilter(df,lgrades==\"B-\")\n\n# A tibble: 3 × 3\n  id    gender lgrades\n  &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n1 SD106 F      B-     \n2 SD109 M      B-     \n3 SD110 M      B-"
  },
  {
    "objectID": "rBasics/data-types/tables-frequency.html#tables-in-baser",
    "href": "rBasics/data-types/tables-frequency.html#tables-in-baser",
    "title": "tables-frequency",
    "section": "",
    "text": "library(tidyverse)\n# fct_inorder is in tidyverse\n\nid&lt;- str_c(\"SD\",101:110,sep=\"\")\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdlevels &lt;- fct_inorder(c(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"D+\",\"D\",\"F\"))\ngender &lt;- factor(c(\"M\",\"F\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"M\",\"M\"))\n\nlgrades &lt;- factor(ltrgrades, levels=gdlevels)\ndf &lt;- tibble(id,gender, lgrades)\ndf\n\n# A tibble: 10 × 3\n   id    gender lgrades\n   &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n 1 SD101 M      C+     \n 2 SD102 F      F      \n 3 SD103 F      B      \n 4 SD104 F      A+     \n 5 SD105 M      B      \n 6 SD106 F      B-     \n 7 SD107 M      A      \n 8 SD108 M      C      \n 9 SD109 M      B-     \n10 SD110 M      B-     \n\n\n\n\n\n\n# use table function to count frequency in lgrades\ntab1 &lt;- table(df$lgrades) \ntab1\n\n\nA+  A A- B+  B B- C+  C D+  D  F \n 1  1  0  0  2  3  1  1  0  0  1 \n\n# redo table back into a dataframe\ndf2 &lt;- data.frame(tab1)\nnames(df2) &lt;- c(\"grades\",\"freq\")\ndf2\n\n   grades freq\n1      A+    1\n2       A    1\n3      A-    0\n4      B+    0\n5       B    2\n6      B-    3\n7      C+    1\n8       C    1\n9      D+    0\n10      D    0\n11      F    1\n\n\n\n\n\n\ntwoWay &lt;- table(df$gender,df$lgrades)\ntwoWay\n\n   \n    A+ A A- B+ B B- C+ C D+ D F\n  F  1 0  0  0 1  1  0 0  0 0 1\n  M  0 1  0  0 1  2  1 1  0 0 0\n\n\n\n\n\nfind those that have B-\n\nfilter(df,lgrades==\"B-\")\n\n# A tibble: 3 × 3\n  id    gender lgrades\n  &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n1 SD106 F      B-     \n2 SD109 M      B-     \n3 SD110 M      B-"
  },
  {
    "objectID": "rBasics/dataframes/dataframes.html",
    "href": "rBasics/dataframes/dataframes.html",
    "title": "dataframe",
    "section": "",
    "text": "data-entry\nselect-filter-arrange\ngrep\ntransform"
  },
  {
    "objectID": "rBasics/dataframes/data-entry/data-entry.html",
    "href": "rBasics/dataframes/data-entry/data-entry.html",
    "title": "data-entry",
    "section": "",
    "text": "df-textentry (baseR)\ninput-tibble (tidyverse)\ndf-importExport (tidyverse, rio)"
  },
  {
    "objectID": "rBasics/dataframes/data-entry/input-tibble.html",
    "href": "rBasics/dataframes/data-entry/input-tibble.html",
    "title": "input-tibble",
    "section": "",
    "text": "Note\n\n\n\n\nrequires library(tidyverse)\ntibble allows pipes |&gt; to be used\n\n\n\n\n1. using tibble() from tidyverse\n\nlibrary(tidyverse)\n# quotes required\n\ntb1 &lt;- tibble(\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\"),\npgms = c(23.2,25.4,14.0,13)  \n)\ntb1\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ   23.2\n2 NSHD   25.4\n3 SHBS   14  \n4 SST    13  \n\nstr(tb1)\n\ntibble [4 × 2] (S3: tbl_df/tbl/data.frame)\n $ sch : chr [1:4] \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: num [1:4] 23.2 25.4 14 13\n\n\n\n\n2. using tribble() - a transposed tibble\n\ntb2&lt;-tribble(\n  ~sch, ~pgms,\n  \"SBIZ\", 23,\n  \"NSHD\", 25,\n  \"SHBS\", 14,\n  \"SST\", 13\n)\ntb2$sch &lt;- factor(tb2$sch)\ntb2\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;fct&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n3. tribble() with dates\n\ntb3 &lt;- tribble (\n  ~date, ~weight,\n  \"2020-02-22\", 13,\n  \"2021-03-02\", 15,\n  \"2022-04-11\", 18,\n  \"2023-03-10\", 23\n)\ntb3$date &lt;- as.Date(tb3$date)\ntb3\n\n# A tibble: 4 × 2\n  date       weight\n  &lt;date&gt;      &lt;dbl&gt;\n1 2020-02-22     13\n2 2021-03-02     15\n3 2022-04-11     18\n4 2023-03-10     23\n\n\n\n\n4. using read_csv from tidyverse::readr\n\ntb4 &lt;- read_csv(\"sch, pgms\n         SBIZ, 23\n         NSHD, 25\n         SHBS, 14\n         SST,  13\n         \")\ntb4\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13"
  },
  {
    "objectID": "rBasics/dataframes/data-entry/df-textEntry.html",
    "href": "rBasics/dataframes/data-entry/df-textEntry.html",
    "title": "df-textEntry",
    "section": "",
    "text": "1. Using data.frame() from BaseR\n\n# strings indicated in quotes\n\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\")\npgms = c(23,25,14,13)\ndf &lt;- data.frame(sch,pgms)\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: num  23 25 14 13\n\n\n\n\n2. Using a read.table from BaseR\n\n# note that parameters include `header=` and `text=`\n# and so don't need quotes. \n\ndf&lt;-read.table(header = TRUE, text = \"\nsch pgms\nSBIZ 23\nNSHD 25\nSHBS 14\nSST 13\n\")\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: int  23 25 14 13\n\n\n\n\n3. Using tibble() from tidyverse\n\nlibrary(tidyverse)\n# quotes required\n\ntb1 &lt;- tibble(\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\"),\npgms = c(23,25,14,13)  \n)\ntb1\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4a. using trible() - a transposed tibble\n\ntb2&lt;-tribble(\n  ~sch, ~pgms,\n  \"SBIZ\", 23,\n  \"NSHD\", 25,\n  \"SHBS\", 14,\n  \"SST\", 13\n)\ntb2\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4b. trible() with date\n\ntb3 &lt;- tribble (\n  ~date, ~weight,\n  \"2020-02-22\", 13,\n  \"2021-03-02\", 15,\n  \"2022-04-11\", 18,\n  \"2023-03-10\", 23\n)\ntb3$date &lt;- as.Date(tb3$date)\ntb3\n\n# A tibble: 4 × 2\n  date       weight\n  &lt;date&gt;      &lt;dbl&gt;\n1 2020-02-22     13\n2 2021-03-02     15\n3 2022-04-11     18\n4 2023-03-10     23\n\n\n\n\n5. Using read_csv from tidyverse::readr\n\nrc &lt;- read_csv(\"sch, pgms\n         SBIZ, 23\n         NSHD, 25\n         SHBS, 14\n         SST,  13\n         \")\nrc\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13"
  },
  {
    "objectID": "rBasics/data-types/strings-wrangling.html",
    "href": "rBasics/data-types/strings-wrangling.html",
    "title": "String Manipulation with BaseR and stringr",
    "section": "",
    "text": "(stringr is part of tidyverse)\nlibrary(tidyverse)\n\ns0 &lt;- \"The quick agile fox jumps over the very lazy dog\"\ns0\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n\ns1 &lt;- str_trim(s0, side=\"both\")\ns1\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\""
  },
  {
    "objectID": "rBasics/data-types/strings-wrangling.html#paste",
    "href": "rBasics/data-types/strings-wrangling.html#paste",
    "title": "String Manipulation with BaseR and stringr",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\""
  },
  {
    "objectID": "rBasics/data-types/string-type.html",
    "href": "rBasics/data-types/string-type.html",
    "title": "String Manipulation with BaseR and stringr",
    "section": "",
    "text": "(stringr is part of tidyverse)\nlibrary(tidyverse)\n\ns0 &lt;- \"The quick agile fox jumps over the very lazy dog\"\ns0\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n\ns1 &lt;- str_trim(s0, side=\"both\")\ns1\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\""
  },
  {
    "objectID": "rBasics/data-types/string-type.html#paste",
    "href": "rBasics/data-types/string-type.html#paste",
    "title": "String Manipulation with BaseR and stringr",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\""
  },
  {
    "objectID": "rBasics/dataframes/select-filter-arrange/df-select.html",
    "href": "rBasics/dataframes/select-filter-arrange/df-select.html",
    "title": "df-select",
    "section": "",
    "text": "1. Data - marks\n\n\nCode\nlibrary(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\n\nCode\nstr(df)\n\n\n'data.frame':   10 obs. of  4 variables:\n $ ID       : chr  \"SD101\" \"SD102\" \"SD103\" \"SD104\" ...\n $ Test1    : num  67 23 60 78 55 67 75 36 45 56\n $ Practical: num  45 23 56 90 87 55 88 55 76 60\n $ FinalExam: num  56 32 74 87 65 66 84 43 65 64\n\n\n\n\n2. Choose columns - select()\n\n\nCode\nselect(df, c(\"ID\", \"FinalExam\"))\n\n\n      ID FinalExam\n1  SD101        56\n2  SD102        32\n3  SD103        74\n4  SD104        87\n5  SD105        65\n6  SD106        66\n7  SD107        84\n8  SD108        43\n9  SD109        65\n10 SD110        64"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-join.html",
    "href": "rBasics/dataframes/transform/data-join.html",
    "title": "data-join",
    "section": "",
    "text": "1. Data\n\n\nCode\nlibrary(tidyverse)\n\nx &lt;- tribble(\n  ~key, ~val_x,\n  1, \"x1\",\n  2, \"x2\",\n  3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n  1, \"y1\",\n  2, \"y2\",\n  4, \"y3\"\n)\nx\n\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\n\nCode\ny\n\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\n1a. full_join()\n\n\nCode\nfull_join(x,y)\n\n\n# A tibble: 4 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y3   \n\n\n\n\n1b. left_join()\n\n\nCode\nleft_join(x,y)\n\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\n\n\n1c. right_join()\n\n\nCode\nright_join(x,y)\n\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y3   \n\n\n\n\n1d. inner_join()\n\n\nCode\ninner_join(x,y)\n\n\n# A tibble: 2 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-cut.html",
    "href": "rBasics/dataframes/transform/data-cut.html",
    "title": "data-cut",
    "section": "",
    "text": "1. dataset - marks\n\nlibrary(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\nTotScore &lt;- 0.2*Test1+0.2*Practical+0.6*FinalExam\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam, TotScore)\ndf\n\n      ID Test1 Practical FinalExam TotScore\n1  SD101    67        45        56     56.0\n2  SD102    23        23        32     28.4\n3  SD103    60        56        74     67.6\n4  SD104    78        90        87     85.8\n5  SD105    55        87        65     67.4\n6  SD106    67        55        66     64.0\n7  SD107    75        88        84     83.0\n8  SD108    36        55        53     50.0\n9  SD109    45        76        65     63.2\n10 SD110    56        60        64     61.6\n\n\n\n\n2. dataset - GradeTable\n\n\n\n\n\n\n\n3. Define the “cuts”\nlike a lookup table\n\ngletters &lt;- c(\"F\",\"D\",\"D+\",\"C\",\"C+\",\"B-\",\"B\",\"B+\",\"A-\",\"A\",\"A+\")\ncutScores &lt;- c(0,40,44,49,54,59,64,69,74,79,84,100)\n\nltrGrades &lt;- cut(df$TotScore, cutScores,right=TRUE, labels=gletters)\ndf$TotScore\n\n [1] 56.0 28.4 67.6 85.8 67.4 64.0 83.0 50.0 63.2 61.6\n\nltrGrades\n\n [1] C+ F  B  A+ B  B- A  C  B- B-\nLevels: F D D+ C C+ B- B B+ A- A A+\n\n\n\n\n4. Mutate ltrGrades to dataframe df\n\ndf&lt;-mutate(df,Grades=ltrGrades)\ndf\n\n      ID Test1 Practical FinalExam TotScore Grades\n1  SD101    67        45        56     56.0     C+\n2  SD102    23        23        32     28.4      F\n3  SD103    60        56        74     67.6      B\n4  SD104    78        90        87     85.8     A+\n5  SD105    55        87        65     67.4      B\n6  SD106    67        55        66     64.0     B-\n7  SD107    75        88        84     83.0      A\n8  SD108    36        55        53     50.0      C\n9  SD109    45        76        65     63.2     B-\n10 SD110    56        60        64     61.6     B-"
  },
  {
    "objectID": "rBasics/dataframes/transform/transform.html",
    "href": "rBasics/dataframes/transform/transform.html",
    "title": "transform",
    "section": "",
    "text": "Computations\n\ndata-mutate （new column)\ndata-cut (assign grades to marks)\ndata-count (count occurrences in an array)\n\n\n\nJoins\n\ndata-join (merging dataframes)"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-arrange-sort.html",
    "href": "rBasics/dataframes/wrangling/df-arrange-sort.html",
    "title": "df-arrange-sort",
    "section": "",
    "text": "data\n\n\nCode\nlibrary(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\nage = c(24,30,39,40,54,22,18,6,66,9)\ndf &lt;- tibble(name, gender, age)\ndf\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Emily   F         24\n 2 David   M         30\n 3 Mark    M         39\n 4 Ruth    F         40\n 5 Sylvia  F         54\n 6 Rebecca F         22\n 7 Tom     M         18\n 8 Gary    M          6\n 9 Peter   M         66\n10 Mary    F          9\n\n\n\n\nbaseR:: order() - sorting\n\n\nCode\n# minus for desc\ndf[order(-age),]\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Peter   M         66\n 2 Sylvia  F         54\n 3 Ruth    F         40\n 4 Mark    M         39\n 5 David   M         30\n 6 Emily   F         24\n 7 Rebecca F         22\n 8 Tom     M         18\n 9 Mary    F          9\n10 Gary    M          6\n\n\n\n\ntidyverse:: arrange()\n\n\nCode\n# needs tidyverse\narrange(df,-age)\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Peter   M         66\n 2 Sylvia  F         54\n 3 Ruth    F         40\n 4 Mark    M         39\n 5 David   M         30\n 6 Emily   F         24\n 7 Rebecca F         22\n 8 Tom     M         18\n 9 Mary    F          9\n10 Gary    M          6"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/wrangling.html",
    "href": "rBasics/dataframes/wrangling/wrangling.html",
    "title": "wrangling",
    "section": "",
    "text": "df-arrange-sort\nfct_inorder"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/wrangling.html#sort-or-arrange",
    "href": "rBasics/dataframes/wrangling/wrangling.html#sort-or-arrange",
    "title": "wrangling",
    "section": "",
    "text": "df-arrange-sort\nfct_inorder"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/wrangling.html#search",
    "href": "rBasics/dataframes/wrangling/wrangling.html#search",
    "title": "wrangling",
    "section": "Search",
    "text": "Search\n\ndf-grep\ndf-regex"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/wrangling.html#replace",
    "href": "rBasics/dataframes/wrangling/wrangling.html#replace",
    "title": "wrangling",
    "section": "Replace",
    "text": "Replace"
  },
  {
    "objectID": "rBasics/dataframes/select-filter-arrange/dataframes.html",
    "href": "rBasics/dataframes/select-filter-arrange/dataframes.html",
    "title": "Dataframes",
    "section": "",
    "text": "df-data.frame\ndf-FilterSelectArrange\ndf-filter (rows)\ndf-select (cols)\ndf-arrange (sort)"
  },
  {
    "objectID": "rBasics/dataframes/select-filter-arrange/df-filter.html",
    "href": "rBasics/dataframes/select-filter-arrange/df-filter.html",
    "title": "df-filter",
    "section": "",
    "text": "1. Dataset - marks\n\n\nCode\nlibrary(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\n\n\n\n2. Choose Rows by rownumber -slice()\n\n\nCode\nhead(df,4) # first 4 rows of df\n\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n4 SD104    78        90        87\n\n\nCode\ntail(df,4) # last 4 rows of df\n\n\n      ID Test1 Practical FinalExam\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\n\nCode\nslice(df, 3:7) # rows 3:7\n\n\n     ID Test1 Practical FinalExam\n1 SD103    60        56        74\n2 SD104    78        90        87\n3 SD105    55        87        65\n4 SD106    67        55        66\n5 SD107    75        88        84\n\n\n\n\n2b. Choose Rows with condition -filter()\n\n\nCode\nfilter(df, FinalExam &lt; 50)\n\n\n     ID Test1 Practical FinalExam\n1 SD102    23        23        32\n2 SD108    36        55        43"
  },
  {
    "objectID": "rBasics/dataframes/select-filter-arrange/df-arrange.html",
    "href": "rBasics/dataframes/select-filter-arrange/df-arrange.html",
    "title": "df-arrange",
    "section": "",
    "text": "1. Data - marks\n\n\nCode\nlibrary(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\n\nCode\nstr(df)\n\n\n'data.frame':   10 obs. of  4 variables:\n $ ID       : chr  \"SD101\" \"SD102\" \"SD103\" \"SD104\" ...\n $ Test1    : num  67 23 60 78 55 67 75 36 45 56\n $ Practical: num  45 23 56 90 87 55 88 55 76 60\n $ FinalExam: num  56 32 74 87 65 66 84 43 65 64\n\n\n\n\n2. Sort on selected column - select() and arrange()\n\n\nCode\ndf1 &lt;- select(df, c(ID, FinalExam))\narrange(df1, desc(FinalExam))\n\n\n      ID FinalExam\n1  SD104        87\n2  SD107        84\n3  SD103        74\n4  SD106        66\n5  SD105        65\n6  SD109        65\n7  SD110        64\n8  SD101        56\n9  SD108        43\n10 SD102        32\n\n\nCode\n# default for arrange is ascending\nselect(df,c(ID, FinalExam)) |&gt; arrange(FinalExam)\n\n\n      ID FinalExam\n1  SD102        32\n2  SD108        43\n3  SD101        56\n4  SD110        64\n5  SD105        65\n6  SD109        65\n7  SD106        66\n8  SD103        74\n9  SD107        84\n10 SD104        87"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-grep.html",
    "href": "rBasics/dataframes/wrangling/df-grep.html",
    "title": "df-grep",
    "section": "",
    "text": "library(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\n\ndf1 &lt;- tibble(name, gender)\ndf1\n\n# A tibble: 10 × 2\n   name    gender\n   &lt;chr&gt;   &lt;fct&gt; \n 1 Emily   F     \n 2 David   M     \n 3 Mark    M     \n 4 Ruth    F     \n 5 Sylvia  F     \n 6 Rebecca F     \n 7 Tom     M     \n 8 Gary    M     \n 9 Peter   M     \n10 Mary    F     \n\n\n\n# using filter with a name condition\nfilter(df1, name==\"Ruth\")\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n# use slice with pos found with grep\nslice(df1, grep(\"Ruth\", df1$name))\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n\n\n# grep gives pos\nname\n\n [1] \"Emily\"   \"David\"   \"Mark\"    \"Ruth\"    \"Sylvia\"  \"Rebecca\" \"Tom\"    \n [8] \"Gary\"    \"Peter\"   \"Mary\"   \n\nf &lt;- grep(\"[Ee]\",name)\nf\n\n[1] 1 6 9\n\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\"  \n\n\n\n\n\n\n# grepl returns boolean\ng &lt;- grepl(\"[Ee]\",name)\ng\n\n [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n\nsum(g)\n\n[1] 3\n\n# returns selected names\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\""
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-grep.html#find-position-of-item-in-a-vector.",
    "href": "rBasics/dataframes/wrangling/df-grep.html#find-position-of-item-in-a-vector.",
    "title": "df-grep",
    "section": "",
    "text": "library(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\n\ndf1 &lt;- tibble(name, gender)\ndf1\n\n# A tibble: 10 × 2\n   name    gender\n   &lt;chr&gt;   &lt;fct&gt; \n 1 Emily   F     \n 2 David   M     \n 3 Mark    M     \n 4 Ruth    F     \n 5 Sylvia  F     \n 6 Rebecca F     \n 7 Tom     M     \n 8 Gary    M     \n 9 Peter   M     \n10 Mary    F     \n\n\n\n# using filter with a name condition\nfilter(df1, name==\"Ruth\")\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n# use slice with pos found with grep\nslice(df1, grep(\"Ruth\", df1$name))\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n\n\n# grep gives pos\nname\n\n [1] \"Emily\"   \"David\"   \"Mark\"    \"Ruth\"    \"Sylvia\"  \"Rebecca\" \"Tom\"    \n [8] \"Gary\"    \"Peter\"   \"Mary\"   \n\nf &lt;- grep(\"[Ee]\",name)\nf\n\n[1] 1 6 9\n\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\"  \n\n\n\n\n\n\n# grepl returns boolean\ng &lt;- grepl(\"[Ee]\",name)\ng\n\n [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n\nsum(g)\n\n[1] 3\n\n# returns selected names\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\""
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-grep.html#search-for-a-term-on-a-dataframe",
    "href": "rBasics/dataframes/wrangling/df-grep.html#search-for-a-term-on-a-dataframe",
    "title": "df-grep",
    "section": "2. Search for a term on a dataframe",
    "text": "2. Search for a term on a dataframe\n\nData: urls downloads\n\ndf &lt;- read.table(header=TRUE, text=\"\n  bookid url                 \n  242   http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n  345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n  456   http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n  463   http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n  644   http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n  662   http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n  677   http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n  842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n  864   http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n  954   http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\")\n\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n\n\n\n\nQuestion:\n\n\n\nQ: Find all rows with item: isg_jutoh\n\n\n\n\n2a. using slice - grep for pos\n\ng2 &lt;- grep(\"isg_jutoh\",df$url)\ng2\n\n[1]  3  9 10\n\n# slice with pos\nslice(df, g2)\n\n  bookid                                                              url\n1    456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2    864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n2b. using subset - grepl for boolean\n\ng3 &lt;- grepl(\"isg_jutoh\", df$url)\ng3\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n\n# subset for TRUE\ndf[g3,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\nstr_subset(df$url,\"isg_jutoh\")\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\""
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-regex.html#data",
    "href": "rBasics/dataframes/wrangling/df-regex.html#data",
    "title": "df-regex",
    "section": "1. Data",
    "text": "1. Data\n\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1. Basic Match\n\n\n1a. str_detect returns the boolean T if found\n\nlibrary(tidyverse)\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n# detect returns boolean TRUE if found\n# regex: str_detect(df$url, regex(\"isg_jutoh\"))\n\nb &lt;- str_detect(df$url, \"isg_jutoh\")\nb\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n\n# returns the df based on match b to df\ndf[b,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1b. str_which returns the search terms pos\n\nc &lt;- str_which(df$url, \"isg_jutoh\")\nc\n\n[1]  3  9 10\n\ndf[c,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\nslice(df,c)\n\n  bookid                                                              url\n1    456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2    864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1c. str_subset returns the df with matching search term\n\ne &lt;- str_subset(df$url, \"isg_jutoh\")\ne\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\nstr(e)\n\n chr [1:3] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\" ...\n\ndf2 &lt;- data.frame(e)\ndf2\n\n                                                                 e\n1 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-regex.html#replace",
    "href": "rBasics/dataframes/wrangling/df-regex.html#replace",
    "title": "df-regex",
    "section": "2. Replace",
    "text": "2. Replace\n\ns1 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nstr_replace(s1, \"lazy\", \"dozy\")\n\n[1] \"The quick brown fox jumps over the dozy dog\"\n\n\n\n\n2a. str_subset to retrieve the matching rows\nReplacing an “errant” symbol (%) in text\n\n# find the symbol\nstr_subset(df$url,\"\\\\%\")\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\n\n\n\n2b. Using regex\n\nstr_subset(df$url, regex(\"[%,+]\"))\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\n\n\n\n2c. str_replace to replace the errant symbols\nReplacing “errant” symbol on original df\n\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\ndf$url &lt;- str_replace(df$url,\"\\\\%2B\",\"_\")\ndf\n\n   bookid                                                            url\n1     242     http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345 http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study_Guide.epub\n4     463  http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644    http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662    http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677  http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842 http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study_Guide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study_Guide.epub"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-arrange.html",
    "href": "rBasics/dataframes/wrangling/df-arrange.html",
    "title": "df-arrange",
    "section": "",
    "text": "library(tidyverse)\n\ntb &lt;- tribble (\n  ~name, ~gender, ~age,\n  \"Sheryl\", \"F\", 34,\n  \"Kisha\", \"F\", 45,\n  \"Brandon\", \"M\", 33,\n  \"Sharon\", \"F\", 38,\n  )\ntb\n\n# A tibble: 4 × 3\n  name    gender   age\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n1 Sheryl  F         34\n2 Kisha   F         45\n3 Brandon M         33\n4 Sharon  F         38"
  },
  {
    "objectID": "rBasics/dataframes/wrangling/df-arrange.html#data",
    "href": "rBasics/dataframes/wrangling/df-arrange.html#data",
    "title": "df-arrange",
    "section": "",
    "text": "library(tidyverse)\n\ntb &lt;- tribble (\n  ~name, ~gender, ~age,\n  \"Sheryl\", \"F\", 34,\n  \"Kisha\", \"F\", 45,\n  \"Brandon\", \"M\", 33,\n  \"Sharon\", \"F\", 38,\n  )\ntb\n\n# A tibble: 4 × 3\n  name    gender   age\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n1 Sheryl  F         34\n2 Kisha   F         45\n3 Brandon M         33\n4 Sharon  F         38"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-count.html",
    "href": "rBasics/dataframes/transform/data-count.html",
    "title": "data-count",
    "section": "",
    "text": "1. Count categories\n\nlibrary(tidyverse)\n\nid&lt;- paste(\"SD\",101:110,sep=\"\") # paste() is in BaseR\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdclass &lt;- fct_inorder(c(\"F\",\"D\",\"D+\",\"C\",\"C+\",\"B-\",\"B\",\"B+\",\"A-\",\"A\",\"A+\"))\n\n# recode ltrgrades into the gdclass levels\nlgrades &lt;- factor(ltrgrades, levels=gdclass)\n\n# form dataframe with the gdclass levels\ndf &lt;- data.frame(id,lgrades)\ndf\n\n      id lgrades\n1  SD101      C+\n2  SD102       F\n3  SD103       B\n4  SD104      A+\n5  SD105       B\n6  SD106      B-\n7  SD107       A\n8  SD108       C\n9  SD109      B-\n10 SD110      B-\n\nstr(df)\n\n'data.frame':   10 obs. of  2 variables:\n $ id     : chr  \"SD101\" \"SD102\" \"SD103\" \"SD104\" ...\n $ lgrades: Factor w/ 11 levels \"F\",\"D\",\"D+\",\"C\",..: 5 1 7 11 7 6 10 4 6 6\n\n\n\n\n2. Count Occurrences of values in ltrgrades column\n\ndt &lt;- table(df$lgrades)  # gives the counting\ndt\n\n\n F  D D+  C C+ B-  B B+ A-  A A+ \n 1  0  0  1  1  3  2  0  0  1  1 \n\ndf2 &lt;- data.frame(dt)    # regroup as a dataframe\nnames(df2)&lt;-c(\"grade\",\"freq\")\ndf2\n\n   grade freq\n1      F    1\n2      D    0\n3     D+    0\n4      C    1\n5     C+    1\n6     B-    3\n7      B    2\n8     B+    0\n9     A-    0\n10     A    1\n11    A+    1"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-mutate.html",
    "href": "rBasics/dataframes/transform/data-mutate.html",
    "title": "data-mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-mutate.html#dataset---marks",
    "href": "rBasics/dataframes/transform/data-mutate.html#dataset---marks",
    "title": "data-mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "rBasics/dataframes/transform/data-mutate.html#add-new-calculated-column---mutate",
    "href": "rBasics/dataframes/transform/data-mutate.html#add-new-calculated-column---mutate",
    "title": "data-mutate",
    "section": "2. add new calculated column - mutate",
    "text": "2. add new calculated column - mutate\nThe new column is based on weighted average of: (Test1:20%, Practical:20% and FinalExam:60%).\n\ndf1 &lt;- mutate(df,\n              TotScore = 0.2*Test1+0.2*Practical+0.6*FinalExam)\ndf1\n\n      ID Test1 Practical FinalExam TotScore\n1  SD101    67        45        56     56.0\n2  SD102    23        23        32     28.4\n3  SD103    60        56        74     67.6\n4  SD104    78        90        87     85.8\n5  SD105    55        87        65     67.4\n6  SD106    67        55        66     64.0\n7  SD107    75        88        84     83.0\n8  SD108    36        55        53     50.0\n9  SD109    45        76        65     63.2\n10 SD110    56        60        64     61.6"
  },
  {
    "objectID": "rReferences/rReferences.html",
    "href": "rReferences/rReferences.html",
    "title": "References",
    "section": "",
    "text": "References\n\nIsmay, C., and A. Y. Kim. 2019. Statistical Inference via Data Science: A ModernDive into r and the Tidyverse. https://doi.org/10.1201/9780367409913: Chapman; Hall/CRC.\n\n\nKuhn, Max, and Julia Silge. 2022. Tidy Modeling with r. \" O’Reilly Media, Inc.\".\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2e ed. \" O’Reilly Media, Inc.\"."
  },
  {
    "objectID": "rBasics/ggplots/gg-facet_grid.html",
    "href": "rBasics/ggplots/gg-facet_grid.html",
    "title": "ggPlot-Facets",
    "section": "",
    "text": "ggPlot-facets\n\n\n\n\nfacet_wrap (x, ncol)\nfacet_grid (x,y, ncol, nrows)\n\n\n\n\nlibrary(tidyverse)\n\n\nData\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nIn order to do facet plot across variables Sepal.Length, Sepal.Width, Petal.Length and Petal.Width, we need to reshape the data to pivot_longer.\n\ncol_order&lt;- c(\"Species\",\"Sepal.Length\",\"Sepal.Width\",\n                        \"Petal.Length\",\"Petal.Width\")\nirisA &lt;- iris[,col_order]\nhead(irisA)\n\n  Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  setosa          5.1         3.5          1.4         0.2\n2  setosa          4.9         3.0          1.4         0.2\n3  setosa          4.7         3.2          1.3         0.2\n4  setosa          4.6         3.1          1.5         0.2\n5  setosa          5.0         3.6          1.4         0.2\n6  setosa          5.4         3.9          1.7         0.4\n\niris_long &lt;- irisA %&gt;%\n  pivot_longer(\n  !Species, \n  names_to = \"Leaves\",\n  values_to =\"cm\")\nhead(iris_long)\n\n# A tibble: 6 × 3\n  Species Leaves          cm\n  &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1 setosa  Sepal.Length   5.1\n2 setosa  Sepal.Width    3.5\n3 setosa  Petal.Length   1.4\n4 setosa  Petal.Width    0.2\n5 setosa  Sepal.Length   4.9\n6 setosa  Sepal.Width    3  \n\n\n\n\nfacet_wrap\n\nwraps a 1-d ribbon of panels into 2-d\nto specify number of columns (ncol=3) or number of rows (nrow=2) in a panel layout.\n\n\np &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\np+facet_wrap(~Leaves, ncol=2)\n\n\n\n\n\n\n\n\n\n\nfacet_grid\n\nproduces 2-d grid of panels defined by variables for rows and columns.\n\n\nq &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\nq + facet_grid(cols = vars(Leaves))"
  },
  {
    "objectID": "rDatasets/penguins/penguinClassification/penguinClassification.html",
    "href": "rDatasets/penguins/penguinClassification/penguinClassification.html",
    "title": "tidyModel_Classification",
    "section": "",
    "text": "tidyModel Classification\nWe use penguins dataset. We build a classification model to distinguish between male and female penguins.\n\nDataset"
  },
  {
    "objectID": "rDatasets/penguins/penguinClass.html",
    "href": "rDatasets/penguins/penguinClass.html",
    "title": "penguin Classifier",
    "section": "",
    "text": "library(tidyverse)\ntheme_set(theme_bw())\n\n\nData\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nExplore Data\n\npenguins |&gt; count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\npenguins |&gt; count(island)\n\n# A tibble: 3 × 2\n  island        n\n  &lt;fct&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n\npenguins |&gt;\n  ggplot(aes(flipper_length_mm,bill_length_mm,color=sex))+\n  geom_point(alpha=0.7)+\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\n\nBuild a model"
  },
  {
    "objectID": "rDatasets/trees/trees.html",
    "href": "rDatasets/trees/trees.html",
    "title": "BaseR: trees",
    "section": "",
    "text": "trees\n\n\n\n\ntidymodels\nbroom"
  },
  {
    "objectID": "rDatasets/trees/trees.html#dataset",
    "href": "rDatasets/trees/trees.html#dataset",
    "title": "BaseR: trees",
    "section": "Dataset",
    "text": "Dataset\n\ntreesDF &lt;- data.frame(trees)\nstr(trees)\n\n'data.frame':   31 obs. of  3 variables:\n $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n\n\n\n\nstr(trees)\n\nfunction (range = c(1L, 2000L), trans = NULL)"
  },
  {
    "objectID": "data-types.html",
    "href": "data-types.html",
    "title": "data-types",
    "section": "",
    "text": "Basic Types\n\nbasic-types\n\n\n\nStrings\n\nstring-type\n\n\n\nFactors\n\nfct_inorder\nfactors-recode\n\n\n\nDates\n\ndates-lubridate\ndates-eeptools\n\n\n\nTables\n\ntables-frequency"
  },
  {
    "objectID": "datatypes.html",
    "href": "datatypes.html",
    "title": "datatypes",
    "section": "",
    "text": "DataTypes\n\nnumbers\nstrings\nfactors\ndates\nlists\nmatrices\ntables",
    "crumbs": [
      "Datatypes"
    ]
  },
  {
    "objectID": "dataframes.html",
    "href": "dataframes.html",
    "title": "dataframes",
    "section": "",
    "text": "textEntry\nimportExport\nfilterSelectArrange\nmutate\npivot_longer\ncaseMatch",
    "crumbs": [
      "DataFrames"
    ]
  },
  {
    "objectID": "ggplots/gg-Basics.html",
    "href": "ggplots/gg-Basics.html",
    "title": "ggplot-Basics",
    "section": "",
    "text": "Five named plots\n\n\n\n\nscatter: geom_point()\nline : geom_line()\nbar count: geom_bar()\ncolumn: geom_col()\nfrequency: geom_histogram()"
  },
  {
    "objectID": "ggplots/gg-Basics.html#data",
    "href": "ggplots/gg-Basics.html#data",
    "title": "ggplot-Basics",
    "section": "Data",
    "text": "Data\n\ngirth &lt;- c(40,45,53,55,63,65,67)\nheight &lt;- c(56.2,33.3,61.2,38.4,47.4,30.0,40.4)\nage &lt;- c(15,18,28,40,55,65,76)\nsex &lt;- c('M','F','M','F','M','M','F')\ndf &lt;- data.frame(girth,height,age,sex)\ndf\n\n  girth height age sex\n1    40   56.2  15   M\n2    45   33.3  18   F\n3    53   61.2  28   M\n4    55   38.4  40   F\n5    63   47.4  55   M\n6    65   30.0  65   M\n7    67   40.4  76   F\n\n\n\n\n\n\n\n\n\n1. Scatter Plot\n\n\n\n\ngeom_point = Scatter Plot\naes(color=sex)\nlab(title,subtitle,xlabel,ylabel)\n\n\n\n\n# 1. Scatter\nlibrary(tidyverse)\nggplot(df, aes(x=girth, y=height, color=sex))+\n  geom_point(size=2)+\n  labs(\n    title=\"1. Scatter Plot\",\n    subtitle=\"Date: 28 Jul 2024\",\n    x = \"Girth(cm)\",\n    y = \"Height(cm)\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. ScatterLines\n\n\n\n\nxlims, ylims\nmarker (attributes from geom_point())\n\n\n\n\n# 2. ScatterLines\nggplot(df)+\n  xlim(0,100)+\n  ylim(0,80)+\n  \n  geom_point(x=age,y=girth,shape=21, size=4,fill=\"orange\",alpha=0.4)+\n  geom_line(aes(x=age,y=girth,color=\"girth\"),show.legend=FALSE)+\n  geom_point(x=age,y=height,shape=21, size=4,fill=\"yellow\")+\n  geom_line(aes(x=age,y=height,color=\"height\"),show.legend=FALSE)+\n  scale_color_manual(values=c(\"red\",\"blue\"))+\n  \n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. BarPlot\n\n\n\n\ncounts categories\nrunif()\n\n\n\n\n\n# barplot\ndirection = c('N','S','E','W','W','E','W','E','E','E','E','S','S','N','N','W','E','E','N','N','N','S','E','W','W','E','W','E','E','E')\nspeed = rnorm(30, 5, 0.2)\ndfWind &lt;- data.frame(direction,speed)\nstr(dfWind)\n\n'data.frame':   30 obs. of  2 variables:\n $ direction: chr  \"N\" \"S\" \"E\" \"W\" ...\n $ speed    : num  5.02 4.78 4.85 4.87 4.85 ...\n\nggplot(dfWind,aes(x=direction, fill=direction))+\n  geom_bar(color=\"gray\")+\n  labs(\n    title=\"3. BarPlot\",\n    subtitle=\"auto counting\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4. ColumnPlot\n\n\n\n\nannotate values : geom_text()\n\n\n\n\nschool &lt;- c(\"NSHD\",\"SHBS\",\"SBIZ\",\"LAW\")\nnumSG &lt;- c(68,140,90,55)\ndf2 &lt;- data.frame(school,numSG)\ndf2\n\n  school numSG\n1   NSHD    68\n2   SHBS   140\n3   SBIZ    90\n4    LAW    55\n\nggplot(df2, aes(x=school, y=numSG, fill=school))+\n  labs(\n    title=\"4.ColumnPlot\",\n   subtitle=\"yValues\")+\n  geom_col(color=\"gray\")+\n  scale_fill_manual(values=c(\"lightgreen\",\"yellow\",\"lightblue\",\"purple\"))+\n  geom_text(aes(label=numSG),nudge_y=10)+\n  ylim(0,180)+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. Histogram\n\n\n\n\ngeom_histogram\nbin\n\n\n\n\n  str(dfWind)\n\n'data.frame':   30 obs. of  2 variables:\n $ direction: chr  \"N\" \"S\" \"E\" \"W\" ...\n $ speed    : num  5.02 4.78 4.85 4.87 4.85 ...\n\n  ggplot(dfWind, aes(x=speed))+\n    geom_histogram(bins = 8, fill=\"lightgray\",color=\"black\")+\n    labs(\n      title=\"5. Histogram\",\n      subtitle = \"bins=8\",\n      xlab = \"Wind Speed\",\n      ylab = \"Frequency\"\n    )"
  },
  {
    "objectID": "datatypes/string-type.html",
    "href": "datatypes/string-type.html",
    "title": "String Manipulation",
    "section": "",
    "text": "BaseR\nstringr\n\n\n\n\ntolower\nstr_c\n\n\ntoupper\nstr_length\n\n\nsubstring\nstr_sub\n\n\npaste\nstr_trim\n\n\n\n\nlibrary(tidyverse)\n\ns0 &lt;- \"  The quick agile fox jumps over the very lazy dog \"\ns0\n\n[1] \"  The quick agile fox jumps over the very lazy dog \"\n\nstr_length(s0)\n\n[1] 51\n\ns1 &lt;- str_trim(s0, side=\"both\")\ns1\n\n[1] \"The quick agile fox jumps over the very lazy dog\"\n\nstr_length(s1)\n\n[1] 48"
  },
  {
    "objectID": "datatypes/string-type.html#strsplit-returns-a-list",
    "href": "datatypes/string-type.html#strsplit-returns-a-list",
    "title": "String Manipulation",
    "section": "strsplit (returns a list)",
    "text": "strsplit (returns a list)\n\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\"   \n\ntypeof(t1)\n\n[1] \"list\"\n\n\n\nsplit into chars\n\nu0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nu1 &lt;- strsplit(u0, \"\")\nu1\n\n[[1]]\n [1] \"T\" \"h\" \"e\" \" \" \"q\" \"u\" \"i\" \"c\" \"k\" \" \" \"b\" \"r\" \"o\" \"w\" \"n\" \" \" \"f\" \"o\" \"x\"\n[20] \" \" \"j\" \"u\" \"m\" \"p\" \"s\" \" \" \"o\" \"v\" \"e\" \"r\" \" \" \"t\" \"h\" \"e\" \" \" \"l\" \"a\" \"z\"\n[39] \"y\" \" \" \"d\" \"o\" \"g\"\n\n\n\n\nsplit into words\n\nu2 &lt;- strsplit(u0, \" \")\nu2\n\n[[1]]\n[1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"  \n\n\n\n\nregex can be used in strsplit\n\nv0 &lt;- \"all16i5need6is4a%long8vacation\"\nv1 &lt;- strsplit(v0,split=\"[0-9,%]+\")\nv1\n\n[[1]]\n[1] \"all\"      \"i\"        \"need\"     \"is\"       \"a\"        \"long\"     \"vacation\""
  },
  {
    "objectID": "datatypes/string-type.html#paste",
    "href": "datatypes/string-type.html#paste",
    "title": "String Manipulation",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\""
  },
  {
    "objectID": "datatypes/fct_inorder.html",
    "href": "datatypes/fct_inorder.html",
    "title": "fct_inorder",
    "section": "",
    "text": "Dataset\n\nlibrary(tidyverse)\ntb &lt;- tribble(\n  ~cancer, ~cases, ~sex,\n  \"Colorectal\", 66, \"M\",\n   \"Liver\", 29, \"M\",\n   \"Skin\", 21, \"M\",\n   \"Kidney\", 17, \"M\",\n   \"Colorectal\", 12, \"F\",\n   \"Skin\", 17, \"F\",\n)\ntb$cancer &lt;- tb$cancer |&gt; factor()\ntb$sex &lt;- tb$sex |&gt; factor()\ntb\n\n# A tibble: 6 × 3\n  cancer     cases sex  \n  &lt;fct&gt;      &lt;dbl&gt; &lt;fct&gt;\n1 Colorectal    66 M    \n2 Liver         29 M    \n3 Skin          21 M    \n4 Kidney        17 M    \n5 Colorectal    12 F    \n6 Skin          17 F    \n\n\n\n\n\n\n\n\nNote\n\n\n\nDefault factor levels are placed alphabetically and are so plotted on ggplot2. To change the sequence use fct_inorder\n\n\n\nlevels(tb$cancer)\n\n[1] \"Colorectal\" \"Kidney\"     \"Liver\"      \"Skin\"      \n\ntb$cancer &lt;- fct_inorder(tb$cancer)\nlevels(tb$cancer)\n\n[1] \"Colorectal\" \"Liver\"      \"Skin\"       \"Kidney\"    \n\n\n\n\n\n\n\n\nNote\n\n\n\nThere’s also fct_inseq and fct_infreq (by number of observations with each level). They are found in the forcats package under tidyverse. Ref: https://forcats.tidyverse.org/reference/fct_inorder.html"
  },
  {
    "objectID": "datatypes/dates-lubridate.html",
    "href": "datatypes/dates-lubridate.html",
    "title": "dates-lubridate",
    "section": "",
    "text": "1. Dealing with Dates\n\nBefore importing from Excel it is probably a good idea to custom-format in Excel the dates as yyyy-mm-dd (e.g. 2021-05-12). It will make things consistent and easier.\nUse library(rio) and import - it will ensure that the date format is kept.\nlibrary(lubridate) is part of tidyverse.\nUse `tibble`to check if Dates are recognized correctly before filtering\n\n\nlibrary(tidyverse)\nlibrary(rio)\n\ndf &lt;- import(\"../assets/Vaccines.csv\")\ntibble(df)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n\n\n2. Filtering rows based on Date\n\nfilter(df, Date&gt;=\"2021-02-02\" & Date &lt; \"2021-03-01\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n\n\n\nfilter(df, Date &gt; \"2021-01-31\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n4 2021-03-01  317715  207324\n5 2021-03-04  350000  215000"
  },
  {
    "objectID": "datatypes/basic-types.html",
    "href": "datatypes/basic-types.html",
    "title": "Data Types",
    "section": "",
    "text": "1. type: num\n\n# add a L if you want integers\na &lt;- 2L + 3L\nstr(a)\n\n int 5\n\n# is.double\nb &lt;- 2 + 3\nstr(b)\n\n num 5\n\n# convert with as.integer\nbi &lt;- as.integer(b)\nstr(bi)\n\n int 5\n\nc &lt;- pi/3\nstr(c)\n\n num 1.05\n\nc(c, typeof(c))\n\n[1] \"1.0471975511966\" \"double\"         \n\n\n\n\n2. type: chr\n(strings are represented as chr)\n\n# single letter single quotes\n# multiple letters double quotes\n\nc &lt;- c(\"I believe\")\nstr(c)\n\n chr \"I believe\"\n\ntypeof(c)\n\n[1] \"character\"\n\n# merge strings\nd &lt;- paste(\"I really\",\"believe\")  \nstr(d)\n\n chr \"I really believe\"\n\n\n\n\n3. type: factor\n\ne &lt;- factor(c(\"head\",\"tail\"))\nstr(e)\n\n Factor w/ 2 levels \"head\",\"tail\": 1 2\n\n\n\n\n4. type: vector\n\nvec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6\n\n\n\ntype: vec-matrix\ntype: dataframe\n\n\n\n5. type: matrix\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4\n\n\n\n\n6. type: dataframe\n\nf &lt;- c(\"dogs\",\"cats\",\"gerbils\")\ng &lt;- c(3, 5, 8)\ndf &lt;- data.frame(animal=f, num=g)\ndf\n\n   animal num\n1    dogs   3\n2    cats   5\n3 gerbils   8\n\nstr(df)\n\n'data.frame':   3 obs. of  2 variables:\n $ animal: chr  \"dogs\" \"cats\" \"gerbils\"\n $ num   : num  3 5 8\n\n\n\n\n7. type: list\n\nfruitlist &lt;- list(\"apple\",\"cherry\",1024)\nfruitlist[1]\n\n[[1]]\n[1] \"apple\"\n\nstr(fruitlist)\n\nList of 3\n $ : chr \"apple\"\n $ : chr \"cherry\"\n $ : num 1024"
  },
  {
    "objectID": "dataframes/transform/data-join.html",
    "href": "dataframes/transform/data-join.html",
    "title": "data-join",
    "section": "",
    "text": "1. Data\n\n\nCode\nlibrary(tidyverse)\n\nx &lt;- tribble(\n  ~key, ~val_x,\n  1, \"x1\",\n  2, \"x2\",\n  3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n  1, \"y1\",\n  2, \"y2\",\n  4, \"y3\"\n)\nx\n\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\n\nCode\ny\n\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\n1a. full_join()\n\n\nCode\nfull_join(x,y)\n\n\n# A tibble: 4 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y3   \n\n\n\n\n1b. left_join()\n\n\nCode\nleft_join(x,y)\n\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\n\n\n1c. right_join()\n\n\nCode\nright_join(x,y)\n\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y3   \n\n\n\n\n1d. inner_join()\n\n\nCode\ninner_join(x,y)\n\n\n# A tibble: 2 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2"
  },
  {
    "objectID": "dataframes/transform/data-mutate.html",
    "href": "dataframes/transform/data-mutate.html",
    "title": "data-mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/transform/data-mutate.html#dataset---marks",
    "href": "dataframes/transform/data-mutate.html#dataset---marks",
    "title": "data-mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/transform/data-mutate.html#add-new-calculated-column---mutate",
    "href": "dataframes/transform/data-mutate.html#add-new-calculated-column---mutate",
    "title": "data-mutate",
    "section": "2. add new calculated column - mutate",
    "text": "2. add new calculated column - mutate\nThe new column is based on weighted average of: (Test1:20%, Practical:20% and FinalExam:60%).\n\ndf1 &lt;- mutate(df,\n              TotScore = 0.2*Test1+0.2*Practical+0.6*FinalExam)\ndf1\n\n      ID Test1 Practical FinalExam TotScore\n1  SD101    67        45        56     56.0\n2  SD102    23        23        32     28.4\n3  SD103    60        56        74     67.6\n4  SD104    78        90        87     85.8\n5  SD105    55        87        65     67.4\n6  SD106    67        55        66     64.0\n7  SD107    75        88        84     83.0\n8  SD108    36        55        53     50.0\n9  SD109    45        76        65     63.2\n10 SD110    56        60        64     61.6"
  },
  {
    "objectID": "dataframes/transform/data-count.html",
    "href": "dataframes/transform/data-count.html",
    "title": "data-count",
    "section": "",
    "text": "1. Count categories\n\nlibrary(tidyverse)\n\nid&lt;- paste(\"SD\",101:110,sep=\"\") # paste() is in BaseR\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdclass &lt;- fct_inorder(c(\"F\",\"D\",\"D+\",\"C\",\"C+\",\"B-\",\"B\",\"B+\",\"A-\",\"A\",\"A+\"))\n\n# recode ltrgrades into the gdclass levels\nlgrades &lt;- factor(ltrgrades, levels=gdclass)\n\n# form dataframe with the gdclass levels\ndf &lt;- data.frame(id,lgrades)\ndf\n\n      id lgrades\n1  SD101      C+\n2  SD102       F\n3  SD103       B\n4  SD104      A+\n5  SD105       B\n6  SD106      B-\n7  SD107       A\n8  SD108       C\n9  SD109      B-\n10 SD110      B-\n\nstr(df)\n\n'data.frame':   10 obs. of  2 variables:\n $ id     : chr  \"SD101\" \"SD102\" \"SD103\" \"SD104\" ...\n $ lgrades: Factor w/ 11 levels \"F\",\"D\",\"D+\",\"C\",..: 5 1 7 11 7 6 10 4 6 6\n\n\n\n\n2. Count Occurrences of values in ltrgrades column\n\ndt &lt;- table(df$lgrades)  # gives the counting\ndt\n\n\n F  D D+  C C+ B-  B B+ A-  A A+ \n 1  0  0  1  1  3  2  0  0  1  1 \n\ndf2 &lt;- data.frame(dt)    # regroup as a dataframe\nnames(df2)&lt;-c(\"grade\",\"freq\")\ndf2\n\n   grade freq\n1      F    1\n2      D    0\n3     D+    0\n4      C    1\n5     C+    1\n6     B-    3\n7      B    2\n8     B+    0\n9     A-    0\n10     A    1\n11    A+    1"
  },
  {
    "objectID": "dataframes/wrangling/df-data.html",
    "href": "dataframes/wrangling/df-data.html",
    "title": "df-data",
    "section": "",
    "text": "Data\n\nlibrary(tidyverse)\n\nid &lt;- str_c(\"SD\",101:108)\ntest1 &lt;- c(67,23,60,78,55,67,75,36)\npractical &lt;- c(45,23,56,90,87,55,88,55)\nfinalExam &lt;- c(56,32,74,87,65,66,84,43)\ndf &lt;- data.frame(id, test1, practical, finalExam)\ndf\n\n     id test1 practical finalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n4 SD104    78        90        87\n5 SD105    55        87        65\n6 SD106    67        55        66\n7 SD107    75        88        84\n8 SD108    36        55        43\n\n\n\n\nSelect specific rows\n\n# extract rows 2 and 5\ndf[c(2,5),]\n\n     id test1 practical finalExam\n2 SD102    23        23        32\n5 SD105    55        87        65\n\n\n\n\n\n\n\nSelect specific columns\n\n# select columns 1 and 4\ndf[,c(1,4)]\n\n     id finalExam\n1 SD101        56\n2 SD102        32\n3 SD103        74\n4 SD104        87\n5 SD105        65\n6 SD106        66\n7 SD107        84\n8 SD108        43\n\n\n\n\nSelect a value\n\n# extract specific finalExam score\ndf[2,4]\n\n[1] 32\n\n\n\n\nExtract maximum value of column\n\nuse of str_c to concatenate strings\nuse of . (dot) to allow pipe %&gt;% to go to second argument\n\n\nlibrary(tidyverse)\ndf$finalExam %&gt;%\n  max() %&gt;%\n  str_c(\"Maximum value = \",.)\n\n[1] \"Maximum value = 87\""
  },
  {
    "objectID": "dataframes/wrangling/df-arrange-sort.html",
    "href": "dataframes/wrangling/df-arrange-sort.html",
    "title": "df-arrange-sort",
    "section": "",
    "text": "data\n\n\nCode\nlibrary(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\nage = c(24,30,39,40,54,22,18,6,66,9)\ndf &lt;- tibble(name, gender, age)\ndf\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Emily   F         24\n 2 David   M         30\n 3 Mark    M         39\n 4 Ruth    F         40\n 5 Sylvia  F         54\n 6 Rebecca F         22\n 7 Tom     M         18\n 8 Gary    M          6\n 9 Peter   M         66\n10 Mary    F          9\n\n\n\n\nbaseR:: order() - sorting\n\n\nCode\n# minus for desc\ndf[order(-age),]\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Peter   M         66\n 2 Sylvia  F         54\n 3 Ruth    F         40\n 4 Mark    M         39\n 5 David   M         30\n 6 Emily   F         24\n 7 Rebecca F         22\n 8 Tom     M         18\n 9 Mary    F          9\n10 Gary    M          6\n\n\n\n\ntidyverse:: arrange()\n\n\nCode\n# needs tidyverse\narrange(df,-age)\n\n\n# A tibble: 10 × 3\n   name    gender   age\n   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n 1 Peter   M         66\n 2 Sylvia  F         54\n 3 Ruth    F         40\n 4 Mark    M         39\n 5 David   M         30\n 6 Emily   F         24\n 7 Rebecca F         22\n 8 Tom     M         18\n 9 Mary    F          9\n10 Gary    M          6"
  },
  {
    "objectID": "dataframes/wrangling/df-data-recode.html",
    "href": "dataframes/wrangling/df-data-recode.html",
    "title": "df-data-case_match",
    "section": "",
    "text": "Data\n\nlibrary(tidyverse)\ndf &lt;- data.frame(\n  Disease = c(0,0,1,1,0),\n  bioMarker = c(31.9,32.0,39.0,32.3,41.0)\n)\ndf\n\n  Disease bioMarker\n1       0      31.9\n2       0      32.0\n3       1      39.0\n4       1      32.3\n5       0      41.0\n\n\n\n\nUse case_match to recode\n\nreplacing recode function on a vector (not dataframe)\n\n\nlibrary(tidyverse)\ndf$Disease &lt;- case_match(\n                  df$Disease,\n                  0 ~ \"noCancer\",\n                  1 ~ \"Cancer\"\n              )\ndf\n\n   Disease bioMarker\n1 noCancer      31.9\n2 noCancer      32.0\n3   Cancer      39.0\n4   Cancer      32.3\n5 noCancer      41.0"
  },
  {
    "objectID": "dataframes/wrangling/df-grep.html",
    "href": "dataframes/wrangling/df-grep.html",
    "title": "df-grep",
    "section": "",
    "text": "library(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\n\ndf1 &lt;- tibble(name, gender)\ndf1\n\n# A tibble: 10 × 2\n   name    gender\n   &lt;chr&gt;   &lt;fct&gt; \n 1 Emily   F     \n 2 David   M     \n 3 Mark    M     \n 4 Ruth    F     \n 5 Sylvia  F     \n 6 Rebecca F     \n 7 Tom     M     \n 8 Gary    M     \n 9 Peter   M     \n10 Mary    F     \n\n\n\n# using filter with a name condition\nfilter(df1, name==\"Ruth\")\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n# use slice with pos found with grep\nslice(df1, grep(\"Ruth\", df1$name))\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n\n\n# grep gives pos\nname\n\n [1] \"Emily\"   \"David\"   \"Mark\"    \"Ruth\"    \"Sylvia\"  \"Rebecca\" \"Tom\"    \n [8] \"Gary\"    \"Peter\"   \"Mary\"   \n\nf &lt;- grep(\"[Ee]\",name)\nf\n\n[1] 1 6 9\n\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\"  \n\n\n\n\n\n\n# grepl returns boolean\ng &lt;- grepl(\"[Ee]\",name)\ng\n\n [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n\nsum(g)\n\n[1] 3\n\n# returns selected names\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\""
  },
  {
    "objectID": "dataframes/wrangling/df-grep.html#find-position-of-item-in-a-vector.",
    "href": "dataframes/wrangling/df-grep.html#find-position-of-item-in-a-vector.",
    "title": "df-grep",
    "section": "",
    "text": "library(tidyverse)\nname = c(\"Emily\",\"David\",\"Mark\",\"Ruth\", \"Sylvia\", \"Rebecca\",\"Tom\",\"Gary\",\"Peter\",\"Mary\")\ngender = factor(c(\"F\",\"M\",\"M\",\"F\",\"F\",\"F\",\"M\",\"M\",\"M\",\"F\"))\n\ndf1 &lt;- tibble(name, gender)\ndf1\n\n# A tibble: 10 × 2\n   name    gender\n   &lt;chr&gt;   &lt;fct&gt; \n 1 Emily   F     \n 2 David   M     \n 3 Mark    M     \n 4 Ruth    F     \n 5 Sylvia  F     \n 6 Rebecca F     \n 7 Tom     M     \n 8 Gary    M     \n 9 Peter   M     \n10 Mary    F     \n\n\n\n# using filter with a name condition\nfilter(df1, name==\"Ruth\")\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n# use slice with pos found with grep\nslice(df1, grep(\"Ruth\", df1$name))\n\n# A tibble: 1 × 2\n  name  gender\n  &lt;chr&gt; &lt;fct&gt; \n1 Ruth  F     \n\n\n\n\n\n# grep gives pos\nname\n\n [1] \"Emily\"   \"David\"   \"Mark\"    \"Ruth\"    \"Sylvia\"  \"Rebecca\" \"Tom\"    \n [8] \"Gary\"    \"Peter\"   \"Mary\"   \n\nf &lt;- grep(\"[Ee]\",name)\nf\n\n[1] 1 6 9\n\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\"  \n\n\n\n\n\n\n# grepl returns boolean\ng &lt;- grepl(\"[Ee]\",name)\ng\n\n [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n\nsum(g)\n\n[1] 3\n\n# returns selected names\nname[f]\n\n[1] \"Emily\"   \"Rebecca\" \"Peter\""
  },
  {
    "objectID": "dataframes/wrangling/df-grep.html#search-for-a-term-on-a-dataframe",
    "href": "dataframes/wrangling/df-grep.html#search-for-a-term-on-a-dataframe",
    "title": "df-grep",
    "section": "2. Search for a term on a dataframe",
    "text": "2. Search for a term on a dataframe\n\nData: urls downloads\n\ndf &lt;- read.table(header=TRUE, text=\"\n  bookid url                 \n  242   http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n  345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n  456   http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n  463   http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n  644   http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n  662   http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n  677   http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n  842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n  864   http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n  954   http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\")\n\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n\n\n\n\nQuestion:\n\n\n\nQ: Find all rows with item: isg_jutoh\n\n\n\n\n2a. using slice - grep for pos\n\ng2 &lt;- grep(\"isg_jutoh\",df$url)\ng2\n\n[1]  3  9 10\n\n# slice with pos\nslice(df, g2)\n\n  bookid                                                              url\n1    456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2    864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n2b. using subset - grepl for boolean\n\ng3 &lt;- grepl(\"isg_jutoh\", df$url)\ng3\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n\n# subset for TRUE\ndf[g3,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\nstr_subset(df$url,\"isg_jutoh\")\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\""
  },
  {
    "objectID": "dataframes/select-filter-arrange/df-FilterSelectArrange.html",
    "href": "dataframes/select-filter-arrange/df-FilterSelectArrange.html",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#dataset",
    "href": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#dataset",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#choose-rows",
    "href": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#choose-rows",
    "title": "df-FilterSelectArrange",
    "section": "2. Choose Rows",
    "text": "2. Choose Rows\n\nChoose Rows by row number - slice\n\nhead(df,3)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n\ntail(df,3)\n\n      ID Test1 Practical FinalExam\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\nslice(df, 3:6)\n\n     ID Test1 Practical FinalExam\n1 SD103    60        56        74\n2 SD104    78        90        87\n3 SD105    55        87        65\n4 SD106    67        55        66"
  },
  {
    "objectID": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#choose-rows-by-criteria---filter",
    "href": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#choose-rows-by-criteria---filter",
    "title": "df-FilterSelectArrange",
    "section": "Choose Rows by Criteria - filter()",
    "text": "Choose Rows by Criteria - filter()\n\nfilter(df, FinalExam&lt;50)\n\n     ID Test1 Practical FinalExam\n1 SD102    23        23        32\n2 SD108    36        55        43\n\n\n\n3. Choose Columns - select()\n\nnames(df)\n\n[1] \"ID\"        \"Test1\"     \"Practical\" \"FinalExam\"\n\nhead(df)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n4 SD104    78        90        87\n5 SD105    55        87        65\n6 SD106    67        55        66\n\ndf[,3:4]\n\n   Practical FinalExam\n1         45        56\n2         23        32\n3         56        74\n4         90        87\n5         87        65\n6         55        66\n7         88        84\n8         55        43\n9         76        65\n10        60        64\n\nselect(df, c(\"ID\",\"FinalExam\"))\n\n      ID FinalExam\n1  SD101        56\n2  SD102        32\n3  SD103        74\n4  SD104        87\n5  SD105        65\n6  SD106        66\n7  SD107        84\n8  SD108        43\n9  SD109        65\n10 SD110        64"
  },
  {
    "objectID": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#sort-by-column-by-name---arrange",
    "href": "dataframes/select-filter-arrange/df-FilterSelectArrange.html#sort-by-column-by-name---arrange",
    "title": "df-FilterSelectArrange",
    "section": "4. Sort by Column by name - arrange()",
    "text": "4. Sort by Column by name - arrange()\n\narrange(df,desc(FinalExam))\n\n      ID Test1 Practical FinalExam\n1  SD104    78        90        87\n2  SD107    75        88        84\n3  SD103    60        56        74\n4  SD106    67        55        66\n5  SD105    55        87        65\n6  SD109    45        76        65\n7  SD110    56        60        64\n8  SD101    67        45        56\n9  SD108    36        55        43\n10 SD102    23        23        32\n\n\n\n# default for arrange is ascending\nselect(df,c(ID, FinalExam)) |&gt; arrange(FinalExam)\n\n      ID FinalExam\n1  SD102        32\n2  SD108        43\n3  SD101        56\n4  SD110        64\n5  SD105        65\n6  SD109        65\n7  SD106        66\n8  SD103        74\n9  SD107        84\n10 SD104        87"
  },
  {
    "objectID": "dataframes/data-entry/data-entry.html",
    "href": "dataframes/data-entry/data-entry.html",
    "title": "data-entry",
    "section": "",
    "text": "df-textentry (baseR)\ninput-tibble (tidyverse)\ndf-importExport (tidyverse, rio)"
  },
  {
    "objectID": "dataframes/data-entry/df-textEntry.html",
    "href": "dataframes/data-entry/df-textEntry.html",
    "title": "df-textEntry",
    "section": "",
    "text": "1. Using data.frame() from BaseR\n\n# strings indicated in quotes\n\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\")\npgms = c(23,25,14,13)\ndf &lt;- data.frame(sch,pgms)\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: num  23 25 14 13\n\n\n\n\n2. Using a read.table from BaseR\n\n# note that parameters include `header=` and `text=`\n# and so don't need quotes. \n\ndf&lt;-read.table(header = TRUE, text = \"\nsch pgms\nSBIZ 23\nNSHD 25\nSHBS 14\nSST 13\n\")\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: int  23 25 14 13\n\n\n\n\n3. Using tibble() from tidyverse\n\nlibrary(tidyverse)\n# quotes required\n\ntb1 &lt;- tibble(\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\"),\npgms = c(23,25,14,13)  \n)\ntb1\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4a. using trible() - a transposed tibble\n\ntb2&lt;-tribble(\n  ~sch, ~pgms,\n  \"SBIZ\", 23,\n  \"NSHD\", 25,\n  \"SHBS\", 14,\n  \"SST\", 13\n)\ntb2\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4b. trible() with date\n\ntb3 &lt;- tribble (\n  ~date, ~weight,\n  \"2020-02-22\", 13,\n  \"2021-03-02\", 15,\n  \"2022-04-11\", 18,\n  \"2023-03-10\", 23\n)\ntb3$date &lt;- as.Date(tb3$date)\ntb3\n\n# A tibble: 4 × 2\n  date       weight\n  &lt;date&gt;      &lt;dbl&gt;\n1 2020-02-22     13\n2 2021-03-02     15\n3 2022-04-11     18\n4 2023-03-10     23\n\n\n\n\n5. Using read_csv from tidyverse::readr\n\nrc &lt;- read_csv(\"sch, pgms\n         SBIZ, 23\n         NSHD, 25\n         SHBS, 14\n         SST,  13\n         \")\nrc\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13"
  },
  {
    "objectID": "dataframes/data-entry/df-importExport.html",
    "href": "dataframes/data-entry/df-importExport.html",
    "title": "df-importExport",
    "section": "",
    "text": "1. Using package readr from TidyVerse\n(use this for csv files, readr does not have “read_xls”)\n\nlibrary(tidyverse)\ndf1 &lt;- read_csv(\"data/data.csv\")\n\n\n\n2. Using package rio (not part of tidyverse)\n(note: reads both .csv or .xlsx files. Note also the pwd)\n\nlibrary(rio)\n\ndf2 &lt;- import(\"data/datesData.xlsx\")\ntibble(df2)\n\n# A tibble: 10 × 3\n   Date                OneDose TwoDose\n   &lt;dttm&gt;                &lt;dbl&gt;   &lt;dbl&gt;\n 1 2021-01-11 00:00:00    3400       0\n 2 2021-01-12 00:00:00    6200       0\n 3 2021-01-22 00:00:00   60000       0\n 4 2021-01-27 00:00:00  113000      50\n 5 2021-01-31 00:00:00  155000      50\n 6 2021-02-02 00:00:00  175000    6000\n 7 2021-02-10 00:00:00  250000    6000\n 8 2021-02-18 00:00:00  250000  110000\n 9 2021-03-01 00:00:00  317715  207324\n10 2021-03-04 00:00:00  350000  215000\n\n\n\ndf3 &lt;- import(\"data/datesData.csv\")\ntibble(df3)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n3. package rio - export\n(can export to .xlsx or .csv file)\n\nexport(df3, \"data/vaccines.csv\")"
  },
  {
    "objectID": "dataframes/select-filter-arrange/dataframes.html",
    "href": "dataframes/select-filter-arrange/dataframes.html",
    "title": "Dataframes",
    "section": "",
    "text": "df-data.frame\ndf-FilterSelectArrange\ndf-filter (rows)\ndf-select (cols)\ndf-arrange (sort)"
  },
  {
    "objectID": "dataframes/wrangling/wrangling.html",
    "href": "dataframes/wrangling/wrangling.html",
    "title": "wrangling",
    "section": "",
    "text": "df-arrange-sort\nfct_inorder"
  },
  {
    "objectID": "dataframes/wrangling/wrangling.html#sort-or-arrange",
    "href": "dataframes/wrangling/wrangling.html#sort-or-arrange",
    "title": "wrangling",
    "section": "",
    "text": "df-arrange-sort\nfct_inorder"
  },
  {
    "objectID": "dataframes/wrangling/wrangling.html#search",
    "href": "dataframes/wrangling/wrangling.html#search",
    "title": "wrangling",
    "section": "Search",
    "text": "Search\n\ndf-grep\ndf-regex"
  },
  {
    "objectID": "dataframes/wrangling/wrangling.html#replace",
    "href": "dataframes/wrangling/wrangling.html#replace",
    "title": "wrangling",
    "section": "Replace",
    "text": "Replace"
  },
  {
    "objectID": "dataframes/wrangling/df-regex.html#data",
    "href": "dataframes/wrangling/df-regex.html#data",
    "title": "df-regex",
    "section": "1. Data",
    "text": "1. Data\n\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1. Basic Match\n\n\n1a. str_detect returns the boolean T if found\n\nlibrary(tidyverse)\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n# detect returns boolean TRUE if found\n# regex: str_detect(df$url, regex(\"isg_jutoh\"))\n\nb &lt;- str_detect(df$url, \"isg_jutoh\")\nb\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n\n# returns the df based on match b to df\ndf[b,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1b. str_which returns the search terms pos\n\nc &lt;- str_which(df$url, \"isg_jutoh\")\nc\n\n[1]  3  9 10\n\ndf[c,]\n\n   bookid                                                              url\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\nslice(df,c)\n\n  bookid                                                              url\n1    456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2    864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\n\n\n\n1c. str_subset returns the df with matching search term\n\ne &lt;- str_subset(df$url, \"isg_jutoh\")\ne\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\nstr(e)\n\n chr [1:3] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\" ...\n\ndf2 &lt;- data.frame(e)\ndf2\n\n                                                                 e\n1 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n2 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n3 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub"
  },
  {
    "objectID": "dataframes/wrangling/df-regex.html#replace",
    "href": "dataframes/wrangling/df-regex.html#replace",
    "title": "df-regex",
    "section": "2. Replace",
    "text": "2. Replace\n\ns1 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nstr_replace(s1, \"lazy\", \"dozy\")\n\n[1] \"The quick brown fox jumps over the dozy dog\"\n\n\n\n\n2a. str_subset to retrieve the matching rows\nReplacing an “errant” symbol (%) in text\n\n# find the symbol\nstr_subset(df$url,\"\\\\%\")\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\n\n\n\n2b. Using regex\n\nstr_subset(df$url, regex(\"[%,+]\"))\n\n[1] \"http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\"\n[2] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\"\n[3] \"http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\"\n\n\n\n\n2c. str_replace to replace the errant symbols\nReplacing “errant” symbol on original df\n\ndf\n\n   bookid                                                              url\n1     242       http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345   http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study%2BGuide.epub\n4     463    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662      http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677    http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842   http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study%2BGuide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study%2BGuide.epub\n\ndf$url &lt;- str_replace(df$url,\"\\\\%2B\",\"_\")\ndf\n\n   bookid                                                            url\n1     242     http://some.edu.sg/isg/SASS/PSY352/ver1_3/PSY352_v1_3.epub\n2     345 http://some.edu.sg/isg/SASS/PSY363/ver1_9_0/PSY363_v1_9_0.epub\n3     456 http://some.edu.sg/isg_jutoh/epub/SHBS/PSY305_Study_Guide.epub\n4     463  http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n5     644    http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n6     662    http://some.edu.sg/isg/SST/ICT114/ver1_1_0/ICT114_v1_1.epub\n7     677  http://some.edu.sg/isg/SST/ICT133/ver1_0_0/ICT133_v1_0_0.epub\n8     842 http://some.edu.sg/isg/NSHD/HRM357/ver1_6_0/HRM357_v1_6_0.epub\n9     864 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM261_Study_Guide.epub\n10    954 http://some.edu.sg/isg_jutoh/epub/NSHD/HRM263_Study_Guide.epub"
  },
  {
    "objectID": "dataframes/wrangling/df-arrange.html",
    "href": "dataframes/wrangling/df-arrange.html",
    "title": "df-arrange",
    "section": "",
    "text": "library(tidyverse)\n\ntb &lt;- tribble (\n  ~name, ~gender, ~age,\n  \"Sheryl\", \"F\", 34,\n  \"Kisha\", \"F\", 45,\n  \"Brandon\", \"M\", 33,\n  \"Sharon\", \"F\", 38,\n  )\ntb\n\n# A tibble: 4 × 3\n  name    gender   age\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n1 Sheryl  F         34\n2 Kisha   F         45\n3 Brandon M         33\n4 Sharon  F         38"
  },
  {
    "objectID": "dataframes/wrangling/df-arrange.html#data",
    "href": "dataframes/wrangling/df-arrange.html#data",
    "title": "df-arrange",
    "section": "",
    "text": "library(tidyverse)\n\ntb &lt;- tribble (\n  ~name, ~gender, ~age,\n  \"Sheryl\", \"F\", 34,\n  \"Kisha\", \"F\", 45,\n  \"Brandon\", \"M\", 33,\n  \"Sharon\", \"F\", 38,\n  )\ntb\n\n# A tibble: 4 × 3\n  name    gender   age\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n1 Sheryl  F         34\n2 Kisha   F         45\n3 Brandon M         33\n4 Sharon  F         38"
  },
  {
    "objectID": "dataframes/transform/transform.html",
    "href": "dataframes/transform/transform.html",
    "title": "transform",
    "section": "",
    "text": "Computations\n\ndata-mutate （new column)\ndata-cut (assign grades to marks)\ndata-count (count occurrences in an array)\n\n\n\nJoins\n\ndata-join (merging dataframes)"
  },
  {
    "objectID": "dataframes/transform/data-cut.html",
    "href": "dataframes/transform/data-cut.html",
    "title": "data-cut",
    "section": "",
    "text": "1. dataset - marks\n\nlibrary(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\nTotScore &lt;- 0.2*Test1+0.2*Practical+0.6*FinalExam\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam, TotScore)\ndf\n\n      ID Test1 Practical FinalExam TotScore\n1  SD101    67        45        56     56.0\n2  SD102    23        23        32     28.4\n3  SD103    60        56        74     67.6\n4  SD104    78        90        87     85.8\n5  SD105    55        87        65     67.4\n6  SD106    67        55        66     64.0\n7  SD107    75        88        84     83.0\n8  SD108    36        55        53     50.0\n9  SD109    45        76        65     63.2\n10 SD110    56        60        64     61.6\n\n\n\n\n2. dataset - GradeTable\n\n\n\n\n\n\n\n3. Define the “cuts”\nlike a lookup table\n\ngletters &lt;- c(\"F\",\"D\",\"D+\",\"C\",\"C+\",\"B-\",\"B\",\"B+\",\"A-\",\"A\",\"A+\")\ncutScores &lt;- c(0,40,44,49,54,59,64,69,74,79,84,100)\n\nltrGrades &lt;- cut(df$TotScore, cutScores,right=TRUE, labels=gletters)\ndf$TotScore\n\n [1] 56.0 28.4 67.6 85.8 67.4 64.0 83.0 50.0 63.2 61.6\n\nltrGrades\n\n [1] C+ F  B  A+ B  B- A  C  B- B-\nLevels: F D D+ C C+ B- B B+ A- A A+\n\n\n\n\n4. Mutate ltrGrades to dataframe df\n\ndf&lt;-mutate(df,Grades=ltrGrades)\ndf\n\n      ID Test1 Practical FinalExam TotScore Grades\n1  SD101    67        45        56     56.0     C+\n2  SD102    23        23        32     28.4      F\n3  SD103    60        56        74     67.6      B\n4  SD104    78        90        87     85.8     A+\n5  SD105    55        87        65     67.4      B\n6  SD106    67        55        66     64.0     B-\n7  SD107    75        88        84     83.0      A\n8  SD108    36        55        53     50.0      C\n9  SD109    45        76        65     63.2     B-\n10 SD110    56        60        64     61.6     B-"
  },
  {
    "objectID": "dataframes/transform/df-data-pivot.html",
    "href": "dataframes/transform/df-data-pivot.html",
    "title": "df-data-case_match",
    "section": "",
    "text": "Data\n\nlibrary(tidyverse)\ndf &lt;- data.frame(\n  Disease = c(0,0,1,1,0),\n  bioMarker = c(31.9,32.0,39.0,32.3,41.0)\n)\ndf\n\n  Disease bioMarker\n1       0      31.9\n2       0      32.0\n3       1      39.0\n4       1      32.3\n5       0      41.0\n\n\n\n\nUse case_match to recode\n\nreplacing recode function on a vector (not dataframe)\n\n\nlibrary(tidyverse)\ndf$Disease &lt;- case_match(\n                  df$Disease,\n                  0 ~ \"noCancer\",\n                  1 ~ \"Cancer\"\n              )\ndf\n\n   Disease bioMarker\n1 noCancer      31.9\n2 noCancer      32.0\n3   Cancer      39.0\n4   Cancer      32.3\n5 noCancer      41.0"
  },
  {
    "objectID": "dataframes/transform/pivot_longer.html",
    "href": "dataframes/transform/pivot_longer.html",
    "title": "df-data-pivot_longer",
    "section": "",
    "text": "library(tidyverse)\n\n\nExamples of pivot_longer\n\n\nData1 - students\n\nstudents &lt;- data.frame(\n  name = c(\"Alice\",\"Bob\",\"Charles\"),\n  math = c(90,85,92),\n  science = c(95,88,91),\n  history = c(87,92,78)\n)\nstudents\n\n     name math science history\n1   Alice   90      95      87\n2     Bob   85      88      92\n3 Charles   92      91      78\n\n\n\nstudents_long &lt;- students %&gt;%\n  pivot_longer(\n    !name,\n    names_to = \"subject\",\n    values_to = \"score\"\n)\nstudents_long\n\n# A tibble: 9 × 3\n  name    subject score\n  &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;\n1 Alice   math       90\n2 Alice   science    95\n3 Alice   history    87\n4 Bob     math       85\n5 Bob     science    88\n6 Bob     history    92\n7 Charles math       92\n8 Charles science    91\n9 Charles history    78\n\n\n\n\nData2 - iris\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nirisA &lt;- iris[,c(5,1,2,3,4)]\nhead(irisA)\n\n  Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  setosa          5.1         3.5          1.4         0.2\n2  setosa          4.9         3.0          1.4         0.2\n3  setosa          4.7         3.2          1.3         0.2\n4  setosa          4.6         3.1          1.5         0.2\n5  setosa          5.0         3.6          1.4         0.2\n6  setosa          5.4         3.9          1.7         0.4\n\n\n\niris_long &lt;- irisA %&gt;%\n  pivot_longer(\n    !Species,\n    names_to = \"Leaf\",\n    values_to = \"cm\"\n  )\nhead(iris_long)\n\n# A tibble: 6 × 3\n  Species Leaf            cm\n  &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1 setosa  Sepal.Length   5.1\n2 setosa  Sepal.Width    3.5\n3 setosa  Petal.Length   1.4\n4 setosa  Petal.Width    0.2\n5 setosa  Sepal.Length   4.9\n6 setosa  Sepal.Width    3"
  },
  {
    "objectID": "datatypes/tables-frequency.html",
    "href": "datatypes/tables-frequency.html",
    "title": "tables-frequency",
    "section": "",
    "text": "library(tidyverse)\n# fct_inorder is in tidyverse\nid&lt;- str_c(\"SD\",101:110,sep=\"\")\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdlevels &lt;- fct_inorder(c(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"D+\",\"D\",\"F\"))\ngender &lt;- factor(c(\"M\",\"F\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"M\",\"M\"))\n\nlgrades &lt;- factor(ltrgrades, levels=gdlevels)\ndf &lt;- tibble(id,gender, lgrades)\ndf\n\n# A tibble: 10 × 3\n   id    gender lgrades\n   &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n 1 SD101 M      C+     \n 2 SD102 F      F      \n 3 SD103 F      B      \n 4 SD104 F      A+     \n 5 SD105 M      B      \n 6 SD106 F      B-     \n 7 SD107 M      A      \n 8 SD108 M      C      \n 9 SD109 M      B-     \n10 SD110 M      B-     \n\n\n\n1. Frequency table (also called a contingency table)\n\n# use table function to count frequency in lgrades\ntab1 &lt;- table(df$lgrades) \ntab1\n\n\nA+  A A- B+  B B- C+  C D+  D  F \n 1  1  0  0  2  3  1  1  0  0  1 \n\n\n\n# redo table back into a dataframe\ndf2 &lt;- data.frame(tab1)\nnames(df2) &lt;- c(\"grades\",\"freq\")\ndf2\n\n   grades freq\n1      A+    1\n2       A    1\n3      A-    0\n4      B+    0\n5       B    2\n6      B-    3\n7      C+    1\n8       C    1\n9      D+    0\n10      D    0\n11      F    1\n\n\n\n\n2. Two-way Contingency table (gender-grades)\n\ntwoWay &lt;- table(df$gender,df$lgrades)\ntwoWay\n\n   \n    A+ A A- B+ B B- C+ C D+ D F\n  F  1 0  0  0 1  1  0 0  0 0 1\n  M  0 1  0  0 1  2  1 1  0 0 0\n\n\n\n\n3. Look up - slice\nfind those that have B-\n\nfilter(df,lgrades==\"B-\")\n\n# A tibble: 3 × 3\n  id    gender lgrades\n  &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n1 SD106 F      B-     \n2 SD109 M      B-     \n3 SD110 M      B-"
  },
  {
    "objectID": "datatypes/factors-recode.html",
    "href": "datatypes/factors-recode.html",
    "title": "factors-recode",
    "section": "",
    "text": "sch0 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\nsch0\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: NSHD SBIZ SHBS SLAW SST\n\n\n\nthe Levels default to an alphabetical sequence, but\nnow I want to list factors Levels by the order in which they first appear\nsch1 Levels will now follow the sequence of sch0 (i.e. SBIZ..)\n\n\nlibrary(tidyverse) #include forcats\nsch1 &lt;- fct_inorder(sch0)\nsch1\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nor I can re-factor sch0 again by making the Levels unique to sch0\n\n\nsch2 &lt;- factor(sch0, levels=unique(sch0))\nsch2\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nthirdly, you can factor and specify the order of Levels\n(which is probably the most direct way)\n\n\n  sch3 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"),\n                 levels=c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\n  sch3\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW"
  },
  {
    "objectID": "datatypes/factors-recode.html#ordering-of-factors",
    "href": "datatypes/factors-recode.html#ordering-of-factors",
    "title": "factors-recode",
    "section": "",
    "text": "sch0 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\nsch0\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: NSHD SBIZ SHBS SLAW SST\n\n\n\nthe Levels default to an alphabetical sequence, but\nnow I want to list factors Levels by the order in which they first appear\nsch1 Levels will now follow the sequence of sch0 (i.e. SBIZ..)\n\n\nlibrary(tidyverse) #include forcats\nsch1 &lt;- fct_inorder(sch0)\nsch1\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nor I can re-factor sch0 again by making the Levels unique to sch0\n\n\nsch2 &lt;- factor(sch0, levels=unique(sch0))\nsch2\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nthirdly, you can factor and specify the order of Levels\n(which is probably the most direct way)\n\n\n  sch3 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"),\n                 levels=c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\n  sch3\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW"
  },
  {
    "objectID": "datatypes/factors-recode.html#renaming-factors",
    "href": "datatypes/factors-recode.html#renaming-factors",
    "title": "factors-recode",
    "section": "2. Renaming Factors",
    "text": "2. Renaming Factors\n\ndf&lt;-tribble(\n~Dept, ~Views,\n\"Learning Systems and Applications\", 2349,\n\"Student Support\", 683,\n\"Student Support\", 697,\n\"Student Support\", 534,\n\"Teaching and Learning Center\",345,\n\"School of Humanities and Behavioral Sciences\",324,\n\"Digital Library Services\",223\n)\ndf\n\n# A tibble: 7 × 2\n  Dept                                         Views\n  &lt;chr&gt;                                        &lt;dbl&gt;\n1 Learning Systems and Applications             2349\n2 Student Support                                683\n3 Student Support                                697\n4 Student Support                                534\n5 Teaching and Learning Center                   345\n6 School of Humanities and Behavioral Sciences   324\n7 Digital Library Services                       223\n\n\n\ndf$Dept &lt;- as.factor(df$Dept) # change chr to factor\nlevels(df$Dept)\n\n[1] \"Digital Library Services\"                    \n[2] \"Learning Systems and Applications\"           \n[3] \"School of Humanities and Behavioral Sciences\"\n[4] \"Student Support\"                             \n[5] \"Teaching and Learning Center\"                \n\n\n\ndf$Dept &lt;- fct_recode(df$Dept,\n           DLS=\"Digital Library Services\",\n           LSA = \"Learning Systems and Applications\",\n           SHBS = \"School of Humanities and Behavioral Sciences\",\n           TLC = \"Teaching and Learning Center\",\n           SS = \"Student Support\")\ndf\n\n# A tibble: 7 × 2\n  Dept  Views\n  &lt;fct&gt; &lt;dbl&gt;\n1 LSA    2349\n2 SS      683\n3 SS      697\n4 SS      534\n5 TLC     345\n6 SHBS    324\n7 DLS     223\n\n\n\ndf$Dept\n\n[1] LSA  SS   SS   SS   TLC  SHBS DLS \nLevels: DLS LSA SHBS SS TLC"
  },
  {
    "objectID": "datatypes/dates-eeptools.html",
    "href": "datatypes/dates-eeptools.html",
    "title": "dates-eeptools",
    "section": "",
    "text": "library(tidyverse) #includes lubridate, readr\nlibrary(eeptools)\n\ndf &lt;- read_csv(\"Name, dob\n               HANKS Tom, 1956-07-09\n               SANDLER Adam, 1966-09-09\n               SMITH Will, 1968-09-25\n               CUMBERBATCH Benedict, 1976-07-19\n               FOX Megan, 1986-05-16\n               STONE Emma, 1988-11-06\n               RADCLIFFE Daniel, 1989-07-23\n               STEWART Kirsten, 1990-04-09\n               WATSON Emma, 1990-04-15\n               \")\ndf$dob &lt;- as.Date(df$dob)\ntibble(df)\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf &lt;- arrange(df,-desc(dob))\ndf\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf1&lt;- df %&gt;%  mutate(age=age_calc(dob,units=\"years\")) %&gt;%\n      mutate(mth=month(dob))\ndf1$mth&lt;-month.abb[df1$mth]\ndf1\n\n# A tibble: 9 × 4\n  Name                 dob          age mth  \n  &lt;chr&gt;                &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 HANKS Tom            1956-07-09  68.3 Jul  \n2 SANDLER Adam         1966-09-09  58.1 Sep  \n3 SMITH Will           1968-09-25  56.1 Sep  \n4 CUMBERBATCH Benedict 1976-07-19  48.2 Jul  \n5 FOX Megan            1986-05-16  38.4 May  \n6 STONE Emma           1988-11-06  35.9 Nov  \n7 RADCLIFFE Daniel     1989-07-23  35.2 Jul  \n8 STEWART Kirsten      1990-04-09  34.5 Apr  \n9 WATSON Emma          1990-04-15  34.5 Apr"
  },
  {
    "objectID": "datatypes/dates-eeptools.html#calculating-age-from-dates",
    "href": "datatypes/dates-eeptools.html#calculating-age-from-dates",
    "title": "dates-eeptools",
    "section": "",
    "text": "library(tidyverse) #includes lubridate, readr\nlibrary(eeptools)\n\ndf &lt;- read_csv(\"Name, dob\n               HANKS Tom, 1956-07-09\n               SANDLER Adam, 1966-09-09\n               SMITH Will, 1968-09-25\n               CUMBERBATCH Benedict, 1976-07-19\n               FOX Megan, 1986-05-16\n               STONE Emma, 1988-11-06\n               RADCLIFFE Daniel, 1989-07-23\n               STEWART Kirsten, 1990-04-09\n               WATSON Emma, 1990-04-15\n               \")\ndf$dob &lt;- as.Date(df$dob)\ntibble(df)\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf &lt;- arrange(df,-desc(dob))\ndf\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf1&lt;- df %&gt;%  mutate(age=age_calc(dob,units=\"years\")) %&gt;%\n      mutate(mth=month(dob))\ndf1$mth&lt;-month.abb[df1$mth]\ndf1\n\n# A tibble: 9 × 4\n  Name                 dob          age mth  \n  &lt;chr&gt;                &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 HANKS Tom            1956-07-09  68.3 Jul  \n2 SANDLER Adam         1966-09-09  58.1 Sep  \n3 SMITH Will           1968-09-25  56.1 Sep  \n4 CUMBERBATCH Benedict 1976-07-19  48.2 Jul  \n5 FOX Megan            1986-05-16  38.4 May  \n6 STONE Emma           1988-11-06  35.9 Nov  \n7 RADCLIFFE Daniel     1989-07-23  35.2 Jul  \n8 STEWART Kirsten      1990-04-09  34.5 Apr  \n9 WATSON Emma          1990-04-15  34.5 Apr"
  },
  {
    "objectID": "ggplots/gg-Regression.html",
    "href": "ggplots/gg-Regression.html",
    "title": "ggplot-Regression",
    "section": "",
    "text": "Regression with ggplot\n\n\n\n\ngeom_smooth\nse=FALSE\nlm(Y~X)"
  },
  {
    "objectID": "ggplots/gg-Regression.html#data",
    "href": "ggplots/gg-Regression.html#data",
    "title": "ggplot-Regression",
    "section": "Data",
    "text": "Data\n\nweight &lt;- c(6.2,7.2,7.6,8.3,8.6,9.2,9.5,10.0,10.4,10.6,11.1,\n            6.9,7.6,8.4,8.8,9.3,9.6,10.1,10.5,10.8,11.4,11.7)\nage &lt;- c(4,6,8,10,12,14,16,18,20,22,24,\n         4,6,8,10,12,14,16,18,20,22,24)\nsex &lt;- c('F','F','F','F','F','F','F','F','F','F','F',\n         'M','M','M','M','M','M','M','M','M','M','M')\ndf &lt;- data.frame(weight,age,sex)\nstr(df)\n\n'data.frame':   22 obs. of  3 variables:\n $ weight: num  6.2 7.2 7.6 8.3 8.6 9.2 9.5 10 10.4 10.6 ...\n $ age   : num  4 6 8 10 12 14 16 18 20 22 ...\n $ sex   : chr  \"F\" \"F\" \"F\" \"F\" ..."
  },
  {
    "objectID": "ggplots/gg-Regression.html#sorted-scatterplot-by-sex",
    "href": "ggplots/gg-Regression.html#sorted-scatterplot-by-sex",
    "title": "ggplot-Regression",
    "section": "Sorted Scatterplot by sex",
    "text": "Sorted Scatterplot by sex\n\ndf1 &lt;- arrange(df,-desc(age))\nggplot(df1, aes(x=age, y=weight,col=sex))+\n  geom_point()"
  },
  {
    "objectID": "ggplots/gg-Regression.html#regression-on-male-data",
    "href": "ggplots/gg-Regression.html#regression-on-male-data",
    "title": "ggplot-Regression",
    "section": "Regression on male data",
    "text": "Regression on male data\n\ndf2 &lt;- df1 %&gt;%\n         filter(sex=='M')\nggplot(df2,aes(x=age,y=weight))+\n  xlim(2,24)+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  labs(\n   title=\"Weight for Males\"\n  )\n\n\n\n\n\n\n\nmodel &lt;- lm(weight~age, data=df2)\nsummary(model)\n\n\nCall:\nlm(formula = weight ~ age, data = df2)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.35455 -0.12455  0.02545  0.12545  0.22545 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 6.334545   0.136201   46.51 4.92e-12 ***\nage         0.230000   0.008866   25.94 9.06e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.186 on 9 degrees of freedom\nMultiple R-squared:  0.9868,    Adjusted R-squared:  0.9853 \nF-statistic:   673 on 1 and 9 DF,  p-value: 9.062e-10"
  },
  {
    "objectID": "ggplots/gg-facet_grid.html",
    "href": "ggplots/gg-facet_grid.html",
    "title": "ggPlot-Facets",
    "section": "",
    "text": "ggPlot-facets\n\n\n\n\nfacet_wrap (x, ncol)\nfacet_grid (x,y, ncol, nrows)\n\n\n\n\nlibrary(tidyverse)\n\n\nData\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nIn order to do facet plot across variables Sepal.Length, Sepal.Width, Petal.Length and Petal.Width, we need to reshape the data to pivot_longer.\n\ncol_order&lt;- c(\"Species\",\"Sepal.Length\",\"Sepal.Width\",\n                        \"Petal.Length\",\"Petal.Width\")\nirisA &lt;- iris[,col_order]\nhead(irisA)\n\n  Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  setosa          5.1         3.5          1.4         0.2\n2  setosa          4.9         3.0          1.4         0.2\n3  setosa          4.7         3.2          1.3         0.2\n4  setosa          4.6         3.1          1.5         0.2\n5  setosa          5.0         3.6          1.4         0.2\n6  setosa          5.4         3.9          1.7         0.4\n\niris_long &lt;- irisA %&gt;%\n  pivot_longer(\n  !Species, \n  names_to = \"Leaves\",\n  values_to =\"cm\")\nhead(iris_long)\n\n# A tibble: 6 × 3\n  Species Leaves          cm\n  &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1 setosa  Sepal.Length   5.1\n2 setosa  Sepal.Width    3.5\n3 setosa  Petal.Length   1.4\n4 setosa  Petal.Width    0.2\n5 setosa  Sepal.Length   4.9\n6 setosa  Sepal.Width    3  \n\n\n\n\nfacet_wrap\n\nwraps a 1-d ribbon of panels into 2-d\nto specify number of columns (ncol=3) or number of rows (nrow=2) in a panel layout.\n\n\np &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\np+facet_wrap(~Leaves, ncol=2)\n\n\n\n\n\n\n\n\n\n\nfacet_grid\n\nproduces 2-d grid of panels defined by variables for rows and columns.\n\n\nq &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\nq + facet_grid(cols = vars(Leaves))"
  },
  {
    "objectID": "datatypes/tables.html",
    "href": "datatypes/tables.html",
    "title": "tables-frequency",
    "section": "",
    "text": "library(tidyverse)\n# fct_inorder is in tidyverse\nid&lt;- str_c(\"SD\",101:110,sep=\"\")\nltrgrades &lt;- c(\"C+\",\"F\",\"B\",\"A+\",\"B\",\"B-\",\"A\",\"C\",\"B-\",\"B-\")\ngdlevels &lt;- fct_inorder(c(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"D+\",\"D\",\"F\"))\ngender &lt;- factor(c(\"M\",\"F\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"M\",\"M\"))\n\nlgrades &lt;- factor(ltrgrades, levels=gdlevels)\ntb &lt;- tibble(id,gender, lgrades)\ntb\n\n# A tibble: 10 × 3\n   id    gender lgrades\n   &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n 1 SD101 M      C+     \n 2 SD102 F      F      \n 3 SD103 F      B      \n 4 SD104 F      A+     \n 5 SD105 M      B      \n 6 SD106 F      B-     \n 7 SD107 M      A      \n 8 SD108 M      C      \n 9 SD109 M      B-     \n10 SD110 M      B-     \n\n\n\n1. Frequency table (also called a contingency table)\n\n# use table function to count frequency in lgrades\ntab1 &lt;- table(tb$lgrades) \ntab1\n\n\nA+  A A- B+  B B- C+  C D+  D  F \n 1  1  0  0  2  3  1  1  0  0  1 \n\n\n\n# redo table back into a dataframe\ndf2 &lt;- data.frame(tab1)\nnames(df2) &lt;- c(\"grades\",\"freq\")\ndf2\n\n   grades freq\n1      A+    1\n2       A    1\n3      A-    0\n4      B+    0\n5       B    2\n6      B-    3\n7      C+    1\n8       C    1\n9      D+    0\n10      D    0\n11      F    1\n\n\n\n\n2. Two-way Contingency table (gender-grades)\n\ntwoWay &lt;- table(tb$gender,tb$lgrades)\ntwoWay\n\n   \n    A+ A A- B+ B B- C+ C D+ D F\n  F  1 0  0  0 1  1  0 0  0 0 1\n  M  0 1  0  0 1  2  1 1  0 0 0\n\n\n\n\n3. Look up - filter\nfind those that have B-\n\nfilter(tb,lgrades==\"B-\")\n\n# A tibble: 3 × 3\n  id    gender lgrades\n  &lt;chr&gt; &lt;fct&gt;  &lt;fct&gt;  \n1 SD106 F      B-     \n2 SD109 M      B-     \n3 SD110 M      B-",
    "crumbs": [
      "Datatypes",
      "tables"
    ]
  },
  {
    "objectID": "datatypes/tables.html#strsplit-returns-a-list",
    "href": "datatypes/tables.html#strsplit-returns-a-list",
    "title": "String Manipulation",
    "section": "strsplit (returns a list)",
    "text": "strsplit (returns a list)\n\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\"   \n\ntypeof(t1)\n\n[1] \"list\"\n\n\n\nsplit into chars\n\nu0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nu1 &lt;- strsplit(u0, \"\")\nu1\n\n[[1]]\n [1] \"T\" \"h\" \"e\" \" \" \"q\" \"u\" \"i\" \"c\" \"k\" \" \" \"b\" \"r\" \"o\" \"w\" \"n\" \" \" \"f\" \"o\" \"x\"\n[20] \" \" \"j\" \"u\" \"m\" \"p\" \"s\" \" \" \"o\" \"v\" \"e\" \"r\" \" \" \"t\" \"h\" \"e\" \" \" \"l\" \"a\" \"z\"\n[39] \"y\" \" \" \"d\" \"o\" \"g\"\n\n\n\n\nsplit into words\n\nu2 &lt;- strsplit(u0, \" \")\nu2\n\n[[1]]\n[1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"  \n\n\n\n\nregex can be used in strsplit\n\nv0 &lt;- \"all16i5need6is4a%long8vacation\"\nv1 &lt;- strsplit(v0,split=\"[0-9,%]+\")\nv1\n\n[[1]]\n[1] \"all\"      \"i\"        \"need\"     \"is\"       \"a\"        \"long\"     \"vacation\"",
    "crumbs": [
      "Datatypes",
      "tables"
    ]
  },
  {
    "objectID": "datatypes/tables.html#paste",
    "href": "datatypes/tables.html#paste",
    "title": "String Manipulation",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\"",
    "crumbs": [
      "Datatypes",
      "tables"
    ]
  },
  {
    "objectID": "datatypes/factors.html",
    "href": "datatypes/factors.html",
    "title": "factors",
    "section": "",
    "text": "# defining factors\nf1 &lt;- factor(c(\"head\",\"tail\"))\nstr(f1)\n\n Factor w/ 2 levels \"head\",\"tail\": 1 2",
    "crumbs": [
      "Datatypes",
      "factors"
    ]
  },
  {
    "objectID": "datatypes/factors.html#ordering-of-factors",
    "href": "datatypes/factors.html#ordering-of-factors",
    "title": "factors",
    "section": "1 Ordering of factors",
    "text": "1 Ordering of factors\n\n1.1 Using fct_inorder()\n\nsch0 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\nsch0\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: NSHD SBIZ SHBS SLAW SST\n\n\n\nthe Levels default to an alphabetical sequence, but\nnow I want to list factors Levels by the order in which they first appear\nsch1 Levels will now follow the sequence of sch0 (i.e. SBIZ..)\n\n\nlibrary(tidyverse) #include forcats\nsch1 &lt;- fct_inorder(sch0)\nsch1\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nor I can re-factor sch0 again by making the Levels unique to sch0\n\n\nsch2 &lt;- factor(sch0, levels=unique(sch0))\nsch2\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW\n\n\n\nthirdly, you can factor and specify the order of Levels\n(which is probably the most direct way)\n\n\n  sch3 &lt;- factor(c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"),\n                 levels=c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\",\"SLAW\"))\n  sch3\n\n[1] SBIZ NSHD SHBS SST  SLAW\nLevels: SBIZ NSHD SHBS SST SLAW",
    "crumbs": [
      "Datatypes",
      "factors"
    ]
  },
  {
    "objectID": "datatypes/factors.html#renaming-factors",
    "href": "datatypes/factors.html#renaming-factors",
    "title": "factors",
    "section": "2 Renaming Factors",
    "text": "2 Renaming Factors\n\ndf&lt;-tribble(\n~Dept, ~Views,\n\"Learning Systems and Applications\", 2349,\n\"Student Support\", 683,\n\"Student Support\", 697,\n\"Student Support\", 534,\n\"Teaching and Learning Center\",345,\n\"School of Humanities and Behavioral Sciences\",324,\n\"Digital Library Services\",223\n)\ndf\n\n# A tibble: 7 × 2\n  Dept                                         Views\n  &lt;chr&gt;                                        &lt;dbl&gt;\n1 Learning Systems and Applications             2349\n2 Student Support                                683\n3 Student Support                                697\n4 Student Support                                534\n5 Teaching and Learning Center                   345\n6 School of Humanities and Behavioral Sciences   324\n7 Digital Library Services                       223\n\n\n\ndf$Dept &lt;- as.factor(df$Dept) # change chr to factor\nlevels(df$Dept)\n\n[1] \"Digital Library Services\"                    \n[2] \"Learning Systems and Applications\"           \n[3] \"School of Humanities and Behavioral Sciences\"\n[4] \"Student Support\"                             \n[5] \"Teaching and Learning Center\"                \n\n\n\ndf$Dept &lt;- fct_recode(df$Dept,\n           DLS=\"Digital Library Services\",\n           LSA = \"Learning Systems and Applications\",\n           SHBS = \"School of Humanities and Behavioral Sciences\",\n           TLC = \"Teaching and Learning Center\",\n           SS = \"Student Support\")\ndf\n\n# A tibble: 7 × 2\n  Dept  Views\n  &lt;fct&gt; &lt;dbl&gt;\n1 LSA    2349\n2 SS      683\n3 SS      697\n4 SS      534\n5 TLC     345\n6 SHBS    324\n7 DLS     223\n\n\n\ndf$Dept\n\n[1] LSA  SS   SS   SS   TLC  SHBS DLS \nLevels: DLS LSA SHBS SS TLC",
    "crumbs": [
      "Datatypes",
      "factors"
    ]
  },
  {
    "objectID": "datatypes/dates.html",
    "href": "datatypes/dates.html",
    "title": "dates",
    "section": "",
    "text": "Before importing from Excel it is probably a good idea to custom-format in Excel the dates as yyyy-mm-dd (e.g. 2021-05-12). It will make things consistent and easier.\nUse library(rio) and import - it will ensure that the date format is kept.\nlibrary(lubridate) is part of tidyverse.\nUse `tibble`to check if Dates are recognized correctly before filtering\n\n\nlibrary(tidyverse)\nlibrary(rio)\n\ndf &lt;- import(\"../assets/Vaccines.csv\")\ntibble(df)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n\nfilter(df, Date&gt;=\"2021-02-02\" & Date &lt; \"2021-03-01\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n\n\n\nfilter(df, Date &gt; \"2021-01-31\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n4 2021-03-01  317715  207324\n5 2021-03-04  350000  215000",
    "crumbs": [
      "Datatypes",
      "dates"
    ]
  },
  {
    "objectID": "datatypes/dates.html#strsplit-returns-a-list",
    "href": "datatypes/dates.html#strsplit-returns-a-list",
    "title": "String Manipulation",
    "section": "strsplit (returns a list)",
    "text": "strsplit (returns a list)\n\n# this happens with website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\"   \n\ntypeof(t1)\n\n[1] \"list\"\n\n\n\nsplit into chars\n\nu0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nu1 &lt;- strsplit(u0, \"\")\nu1\n\n[[1]]\n [1] \"T\" \"h\" \"e\" \" \" \"q\" \"u\" \"i\" \"c\" \"k\" \" \" \"b\" \"r\" \"o\" \"w\" \"n\" \" \" \"f\" \"o\" \"x\"\n[20] \" \" \"j\" \"u\" \"m\" \"p\" \"s\" \" \" \"o\" \"v\" \"e\" \"r\" \" \" \"t\" \"h\" \"e\" \" \" \"l\" \"a\" \"z\"\n[39] \"y\" \" \" \"d\" \"o\" \"g\"\n\n\n\n\nsplit into words\n\nu2 &lt;- strsplit(u0, \" \")\nu2\n\n[[1]]\n[1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"  \n\n\n\n\nregex can be used in strsplit\n\nv0 &lt;- \"all16i5need6is4a%long8vacation\"\nv1 &lt;- strsplit(v0,split=\"[0-9,%]+\")\nv1\n\n[[1]]\n[1] \"all\"      \"i\"        \"need\"     \"is\"       \"a\"        \"long\"     \"vacation\""
  },
  {
    "objectID": "datatypes/dates.html#paste",
    "href": "datatypes/dates.html#paste",
    "title": "String Manipulation",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\""
  },
  {
    "objectID": "datatypes/strings.html",
    "href": "datatypes/strings.html",
    "title": "strings",
    "section": "",
    "text": "tolower\ntoupper\nsubstring\npaste\n\n\n\n\n# single letter single quotes\n# multiple letters use double quotes\n\nc1 &lt;- c(\"I believe\")\nstr(c1)\n\n chr \"I believe\"\n\ntypeof(c1)\n\n[1] \"character\"\n\n# lowercase\nc2 &lt;- tolower(c1)\nstr(c2)\n\n chr \"i believe\"\n\n# paste to merge strings -- concat\nc3 &lt;- paste(\"I really\",\"believe\")  \nstr(c3)\n\n chr \"I really believe\"",
    "crumbs": [
      "Datatypes",
      "strings"
    ]
  },
  {
    "objectID": "datatypes/strings.html#strsplit-returns-a-list",
    "href": "datatypes/strings.html#strsplit-returns-a-list",
    "title": "strings",
    "section": "strsplit (returns a list)",
    "text": "strsplit (returns a list)\n\n# output of website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\"   \n\ntypeof(t1)\n\n[1] \"list\"\n\n\n\nsplit into chars\n\nu0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nu1 &lt;- strsplit(u0, \"\")\nu1\n\n[[1]]\n [1] \"T\" \"h\" \"e\" \" \" \"q\" \"u\" \"i\" \"c\" \"k\" \" \" \"b\" \"r\" \"o\" \"w\" \"n\" \" \" \"f\" \"o\" \"x\"\n[20] \" \" \"j\" \"u\" \"m\" \"p\" \"s\" \" \" \"o\" \"v\" \"e\" \"r\" \" \" \"t\" \"h\" \"e\" \" \" \"l\" \"a\" \"z\"\n[39] \"y\" \" \" \"d\" \"o\" \"g\"\n\n\n\n\nsplit into words\n\nu2 &lt;- strsplit(u0, \" \")\nu2\n\n[[1]]\n[1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"  \n\n\n\n\nregex can be used in strsplit\n\nv0 &lt;- \"all16i5need6is4a%long8vacation\"\nv1 &lt;- strsplit(v0,split=\"[0-9,%]+\")\nv1\n\n[[1]]\n[1] \"all\"      \"i\"        \"need\"     \"is\"       \"a\"        \"long\"     \"vacation\"",
    "crumbs": [
      "Datatypes",
      "strings"
    ]
  },
  {
    "objectID": "datatypes/strings.html#paste",
    "href": "datatypes/strings.html#paste",
    "title": "strings",
    "section": "2. paste()",
    "text": "2. paste()\n\na0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\na1 &lt;- tolower(a0)\na1\n\n[1] \"the quick brown fox jumps over the lazy dog\"",
    "crumbs": [
      "Datatypes",
      "strings"
    ]
  },
  {
    "objectID": "datatypes/numbers.html",
    "href": "datatypes/numbers.html",
    "title": "numbers",
    "section": "",
    "text": "# default is double\na &lt;- 2 + 3\nstr(a)\n\n num 5\n\ntypeof(a)\n\n[1] \"double\"\n\n# add L if you want integers\nb &lt;- 2L + 3L\ntypeof(b)\n\n[1] \"integer\"\n\n# or onvert with as.integer\nb2 &lt;- as.integer(b)\ntypeof(b2)\n\n[1] \"integer\"\n\n# float-decimals\nc &lt;- pi/3\nstr(c)\n\n num 1.05\n\nc(c, typeof(c))\n\n[1] \"1.0471975511966\" \"double\"         \n\n\n\n\n\nf &lt;- c(\"dogs\",\"cats\",\"gerbils\")\ng &lt;- c(3, 5, 8)\ndf &lt;- data.frame(animal=f, num=g)\ndf\n\n   animal num\n1    dogs   3\n2    cats   5\n3 gerbils   8\n\nstr(df)\n\n'data.frame':   3 obs. of  2 variables:\n $ animal: chr  \"dogs\" \"cats\" \"gerbils\"\n $ num   : num  3 5 8\n\n\n\n\n\n\nfruitlist &lt;- list(\"apple\",\"cherry\",1024)\nfruitlist[1]\n\n[[1]]\n[1] \"apple\"\n\nstr(fruitlist)\n\nList of 3\n $ : chr \"apple\"\n $ : chr \"cherry\"\n $ : num 1024",
    "crumbs": [
      "Datatypes",
      "numbers"
    ]
  },
  {
    "objectID": "datatypes/vecmatrix.html",
    "href": "datatypes/vecmatrix.html",
    "title": "vector-matrix",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6"
  },
  {
    "objectID": "datatypes/vecmatrix.html#vectors-and-matrices",
    "href": "datatypes/vecmatrix.html#vectors-and-matrices",
    "title": "vector-matrix",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6\n\n\n\n\n\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4"
  },
  {
    "objectID": "datatypes/vecmatrix.html#type-vector",
    "href": "datatypes/vecmatrix.html#type-vector",
    "title": "vector-matrix",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6"
  },
  {
    "objectID": "datatypes/vecmatrix.html#type-matrix",
    "href": "datatypes/vecmatrix.html#type-matrix",
    "title": "vector-matrix",
    "section": "2 type: matrix",
    "text": "2 type: matrix\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4"
  },
  {
    "objectID": "datatypes/vecmatrix.html#vectors",
    "href": "datatypes/vecmatrix.html#vectors",
    "title": "vector-matrix",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6"
  },
  {
    "objectID": "datatypes/vecmatrix.html#matrices",
    "href": "datatypes/vecmatrix.html#matrices",
    "title": "vector-matrix",
    "section": "2 matrices",
    "text": "2 matrices\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4"
  },
  {
    "objectID": "datatypes/numbers.html#num",
    "href": "datatypes/numbers.html#num",
    "title": "numbers",
    "section": "",
    "text": "# default is double\na &lt;- 2 + 3\nstr(a)\n\n num 5\n\ntypeof(a)\n\n[1] \"double\"\n\n# add L if you want integers\nb &lt;- 2L + 3L\ntypeof(b)\n\n[1] \"integer\"\n\n# or onvert with as.integer\nb2 &lt;- as.integer(b)\ntypeof(b2)\n\n[1] \"integer\"\n\n# float-decimals\nc &lt;- pi/3\nstr(c)\n\n num 1.05\n\nc(c, typeof(c))\n\n[1] \"1.0471975511966\" \"double\"         \n\n\n\n\n\nf &lt;- c(\"dogs\",\"cats\",\"gerbils\")\ng &lt;- c(3, 5, 8)\ndf &lt;- data.frame(animal=f, num=g)\ndf\n\n   animal num\n1    dogs   3\n2    cats   5\n3 gerbils   8\n\nstr(df)\n\n'data.frame':   3 obs. of  2 variables:\n $ animal: chr  \"dogs\" \"cats\" \"gerbils\"\n $ num   : num  3 5 8\n\n\n\n\n\n\nfruitlist &lt;- list(\"apple\",\"cherry\",1024)\nfruitlist[1]\n\n[[1]]\n[1] \"apple\"\n\nstr(fruitlist)\n\nList of 3\n $ : chr \"apple\"\n $ : chr \"cherry\"\n $ : num 1024",
    "crumbs": [
      "Datatypes",
      "numbers"
    ]
  },
  {
    "objectID": "datatypes/strings.html#baser-string-functions",
    "href": "datatypes/strings.html#baser-string-functions",
    "title": "strings",
    "section": "",
    "text": "tolower\ntoupper\nsubstring\npaste\n\n\n\n\n# single letter single quotes\n# multiple letters use double quotes\n\nc1 &lt;- c(\"I believe\")\nstr(c1)\n\n chr \"I believe\"\n\ntypeof(c1)\n\n[1] \"character\"\n\n# lowercase\nc2 &lt;- tolower(c1)\nstr(c2)\n\n chr \"i believe\"\n\n# paste to merge strings -- concat\nc3 &lt;- paste(\"I really\",\"believe\")  \nstr(c3)\n\n chr \"I really believe\"",
    "crumbs": [
      "Datatypes",
      "strings"
    ]
  },
  {
    "objectID": "datatypes/strings.html#tidyverse-string-functions",
    "href": "datatypes/strings.html#tidyverse-string-functions",
    "title": "strings",
    "section": "2 tidyverse string functions",
    "text": "2 tidyverse string functions\n\n\n\n\n\n\nstr_c\nstr_length\nstr_sub\nstr_trim\n\n\n\n\nlibrary(tidyverse)\n\ns0 &lt;- str_c(\"  I almost believe \")\nstr(s0)\n\n chr \"  I almost believe \"\n\nstr_length(s0)\n\n[1] 19\n\n# remove spaces\ns1 &lt;- str_trim(s0, side=\"both\")\ns1\n\n[1] \"I almost believe\"\n\nstr_length(s1)\n\n[1] 16\n\n\n\n\n2.1 strsplit (returns a list)\n\n# output of website crawling\nt0 &lt;- \"get%better%every%day\"\nt1 &lt;- strsplit(t0,split='%')\nt1\n\n[[1]]\n[1] \"get\"    \"better\" \"every\"  \"day\"   \n\ntypeof(t1)\n\n[1] \"list\"\n\n\n\n\n2.2 split into chars\n\nu0 &lt;- c(\"The quick brown fox jumps over the lazy dog\")\nu1 &lt;- strsplit(u0, \"\")\nu1\n\n[[1]]\n [1] \"T\" \"h\" \"e\" \" \" \"q\" \"u\" \"i\" \"c\" \"k\" \" \" \"b\" \"r\" \"o\" \"w\" \"n\" \" \" \"f\" \"o\" \"x\"\n[20] \" \" \"j\" \"u\" \"m\" \"p\" \"s\" \" \" \"o\" \"v\" \"e\" \"r\" \" \" \"t\" \"h\" \"e\" \" \" \"l\" \"a\" \"z\"\n[39] \"y\" \" \" \"d\" \"o\" \"g\"\n\n\n\n\n2.3 split into words\n\nu2 &lt;- strsplit(u0, \" \")\nu2\n\n[[1]]\n[1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"  \n\n\n\n\n2.4 regex can be used in strsplit\n\nv0 &lt;- \"all16i5need6is4a%long8vacation\"\nv1 &lt;- strsplit(v0,split=\"[0-9,%]+\")\nv1\n\n[[1]]\n[1] \"all\"      \"i\"        \"need\"     \"is\"       \"a\"        \"long\"     \"vacation\"",
    "crumbs": [
      "Datatypes",
      "strings"
    ]
  },
  {
    "objectID": "datatypes/matrices.html",
    "href": "datatypes/matrices.html",
    "title": "vectors-matrices",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6",
    "crumbs": [
      "Datatypes",
      "matrices"
    ]
  },
  {
    "objectID": "datatypes/matrices.html#vectors",
    "href": "datatypes/matrices.html#vectors",
    "title": "vectors-matrices",
    "section": "",
    "text": "vec = c(1, 2, 3, 5)\nvec &lt;- vec + 1\nvec\n\n[1] 2 3 4 6\n\nstr(vec)\n\n num [1:4] 2 3 4 6",
    "crumbs": [
      "Datatypes",
      "matrices"
    ]
  },
  {
    "objectID": "datatypes/matrices.html#matrices",
    "href": "datatypes/matrices.html#matrices",
    "title": "vectors-matrices",
    "section": "2 matrices",
    "text": "2 matrices\n\nm &lt;- matrix(c(1, 2, 3, 4), nrow=2, ncol=2)\nm\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nstr(m)\n\n num [1:2, 1:2] 1 2 3 4",
    "crumbs": [
      "Datatypes",
      "matrices"
    ]
  },
  {
    "objectID": "datatypes/dates.html#dealing-with-dates",
    "href": "datatypes/dates.html#dealing-with-dates",
    "title": "dates",
    "section": "",
    "text": "Before importing from Excel it is probably a good idea to custom-format in Excel the dates as yyyy-mm-dd (e.g. 2021-05-12). It will make things consistent and easier.\nUse library(rio) and import - it will ensure that the date format is kept.\nlibrary(lubridate) is part of tidyverse.\nUse `tibble`to check if Dates are recognized correctly before filtering\n\n\nlibrary(tidyverse)\nlibrary(rio)\n\ndf &lt;- import(\"../assets/Vaccines.csv\")\ntibble(df)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n\nfilter(df, Date&gt;=\"2021-02-02\" & Date &lt; \"2021-03-01\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n\n\n\nfilter(df, Date &gt; \"2021-01-31\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n4 2021-03-01  317715  207324\n5 2021-03-04  350000  215000",
    "crumbs": [
      "Datatypes",
      "dates"
    ]
  },
  {
    "objectID": "datatypes/dates.html#filtering-with-dates",
    "href": "datatypes/dates.html#filtering-with-dates",
    "title": "dates",
    "section": "",
    "text": "Before importing from Excel it is probably a good idea to custom-format in Excel the dates as yyyy-mm-dd (e.g. 2021-05-12). It will make things consistent and easier.\nUse library(rio) and import - it will ensure that the date format is kept.\nlibrary(lubridate) is part of tidyverse.\nUse `tibble`to check if Dates are recognized correctly before filtering\n\n\nlibrary(tidyverse)\nlibrary(rio)\n\ndf &lt;- import(\"../assets/Vaccines.csv\")\ntibble(df)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n\nfilter(df, Date&gt;=\"2021-02-02\" & Date &lt; \"2021-03-01\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n\n\n\nfilter(df, Date &gt; \"2021-01-31\")\n\n        Date OneDose TwoDose\n1 2021-02-02  175000    6000\n2 2021-02-10  250000    6000\n3 2021-02-18  250000  110000\n4 2021-03-01  317715  207324\n5 2021-03-04  350000  215000",
    "crumbs": [
      "Datatypes",
      "dates"
    ]
  },
  {
    "objectID": "datatypes/dates.html#calculating-age-from-dates",
    "href": "datatypes/dates.html#calculating-age-from-dates",
    "title": "dates",
    "section": "2 Calculating age from Dates",
    "text": "2 Calculating age from Dates\n\nlibrary(tidyverse) #includes lubridate, readr\nlibrary(eeptools)\n\ndf &lt;- read_csv(\"Name, dob\n               HANKS Tom, 1956-07-09\n               SANDLER Adam, 1966-09-09\n               SMITH Will, 1968-09-25\n               CUMBERBATCH Benedict, 1976-07-19\n               FOX Megan, 1986-05-16\n               STONE Emma, 1988-11-06\n               RADCLIFFE Daniel, 1989-07-23\n               STEWART Kirsten, 1990-04-09\n               WATSON Emma, 1990-04-15\n               \")\ndf$dob &lt;- as.Date(df$dob)\ntibble(df)\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf &lt;- arrange(df,-desc(dob))\ndf\n\n# A tibble: 9 × 2\n  Name                 dob       \n  &lt;chr&gt;                &lt;date&gt;    \n1 HANKS Tom            1956-07-09\n2 SANDLER Adam         1966-09-09\n3 SMITH Will           1968-09-25\n4 CUMBERBATCH Benedict 1976-07-19\n5 FOX Megan            1986-05-16\n6 STONE Emma           1988-11-06\n7 RADCLIFFE Daniel     1989-07-23\n8 STEWART Kirsten      1990-04-09\n9 WATSON Emma          1990-04-15\n\ndf1&lt;- df %&gt;%  mutate(age=age_calc(dob,units=\"years\")) %&gt;%\n      mutate(mth=month(dob))\ndf1$mth&lt;-month.abb[df1$mth]\ndf1\n\n# A tibble: 9 × 4\n  Name                 dob          age mth  \n  &lt;chr&gt;                &lt;date&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 HANKS Tom            1956-07-09  68.3 Jul  \n2 SANDLER Adam         1966-09-09  58.1 Sep  \n3 SMITH Will           1968-09-25  56.1 Sep  \n4 CUMBERBATCH Benedict 1976-07-19  48.2 Jul  \n5 FOX Megan            1986-05-16  38.4 May  \n6 STONE Emma           1988-11-06  35.9 Nov  \n7 RADCLIFFE Daniel     1989-07-23  35.2 Jul  \n8 STEWART Kirsten      1990-04-09  34.5 Apr  \n9 WATSON Emma          1990-04-15  34.5 Apr",
    "crumbs": [
      "Datatypes",
      "dates"
    ]
  },
  {
    "objectID": "datatypes/lists.html",
    "href": "datatypes/lists.html",
    "title": "lists",
    "section": "",
    "text": "# can mix different types\nh &lt;- list(fruits = c(\"apple\", \"bananas\"),quantity = c(3,4))\nh\n\n$fruits\n[1] \"apple\"   \"bananas\"\n\n$quantity\n[1] 3 4\n\nh[1]\n\n$fruits\n[1] \"apple\"   \"bananas\"\nh$fruits\n\n[1] \"apple\"   \"bananas\"\n\n# named list\nh$fruits\n\n[1] \"apple\"   \"bananas\"\n\nh$quantity\n\n[1] 3 4",
    "crumbs": [
      "Datatypes",
      "lists"
    ]
  },
  {
    "objectID": "datatypes/lists.html#convert-named-list-to-tibbledataframe",
    "href": "datatypes/lists.html#convert-named-list-to-tibbledataframe",
    "title": "lists",
    "section": "1 Convert named list to tibble/dataframe",
    "text": "1 Convert named list to tibble/dataframe\n\nlibrary(tidyverse)\ntb &lt;- tibble(fruit=h$fruit, quantity=h$quantity)\ntb\n\n# A tibble: 2 × 2\n  fruit   quantity\n  &lt;chr&gt;      &lt;dbl&gt;\n1 apple          3\n2 bananas        4\n\ntdf &lt;- data.frame(tb)\ntdf\n\n    fruit quantity\n1   apple        3\n2 bananas        4",
    "crumbs": [
      "Datatypes",
      "lists"
    ]
  },
  {
    "objectID": "dataframes/df-textEntry.html",
    "href": "dataframes/df-textEntry.html",
    "title": "textEntry",
    "section": "",
    "text": "1. Using data.frame() from BaseR\n\n# strings indicated in quotes\n\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\")\npgms = c(23,25,14,13)\ndf &lt;- data.frame(sch,pgms)\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: num  23 25 14 13\n\n\n\n\n2. Using a read.table from BaseR\n\n# note that parameters include `header=` and `text=`\n# and so don't need quotes. \n\ndf&lt;-read.table(header = TRUE, text = \"\nsch pgms\nSBIZ 23\nNSHD 25\nSHBS 14\nSST 13\n\")\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: int  23 25 14 13\n\n\n\n\n3. Using tibble() from tidyverse\n\nlibrary(tidyverse)\n# quotes required\n\ntb1 &lt;- tibble(\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\"),\npgms = c(23,25,14,13)  \n)\ntb1\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4a. using trible() - a transposed tibble\n\ntb2&lt;-tribble(\n  ~sch, ~pgms,\n  \"SBIZ\", 23,\n  \"NSHD\", 25,\n  \"SHBS\", 14,\n  \"SST\", 13\n)\ntb2\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4b. trible() with date\n\ntb3 &lt;- tribble (\n  ~date, ~weight,\n  \"2020-02-22\", 13,\n  \"2021-03-02\", 15,\n  \"2022-04-11\", 18,\n  \"2023-03-10\", 23\n)\ntb3$date &lt;- as.Date(tb3$date)\ntb3\n\n# A tibble: 4 × 2\n  date       weight\n  &lt;date&gt;      &lt;dbl&gt;\n1 2020-02-22     13\n2 2021-03-02     15\n3 2022-04-11     18\n4 2023-03-10     23\n\n\n\n\n5. Using read_csv from tidyverse::readr\n\nrc &lt;- read_csv(\"sch, pgms\n         SBIZ, 23\n         NSHD, 25\n         SHBS, 14\n         SST,  13\n         \")\nrc\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13"
  },
  {
    "objectID": "dataframes/importExport.html",
    "href": "dataframes/importExport.html",
    "title": "importExport",
    "section": "",
    "text": "1. Using package readr from TidyVerse\n(use this for csv files, readr does not have “read_xls”)\n\nlibrary(tidyverse)\ndf1 &lt;- read_csv(\"../assets/data.csv\")\n\n\n\n2. Using package rio (not part of tidyverse)\n(note: reads both .csv or .xlsx files. Note also the pwd)\n\nlibrary(rio)\n\ndf2 &lt;- import(\"../assets/datesData.xlsx\")\ntibble(df2)\n\n# A tibble: 10 × 3\n   Date                OneDose TwoDose\n   &lt;dttm&gt;                &lt;dbl&gt;   &lt;dbl&gt;\n 1 2021-01-11 00:00:00    3400       0\n 2 2021-01-12 00:00:00    6200       0\n 3 2021-01-22 00:00:00   60000       0\n 4 2021-01-27 00:00:00  113000      50\n 5 2021-01-31 00:00:00  155000      50\n 6 2021-02-02 00:00:00  175000    6000\n 7 2021-02-10 00:00:00  250000    6000\n 8 2021-02-18 00:00:00  250000  110000\n 9 2021-03-01 00:00:00  317715  207324\n10 2021-03-04 00:00:00  350000  215000\n\n\n\ndf3 &lt;- import(\"../assets/datesData.csv\")\ntibble(df3)\n\n# A tibble: 10 × 3\n   Date       OneDose TwoDose\n   &lt;IDate&gt;      &lt;int&gt;   &lt;int&gt;\n 1 2021-01-11    3400       0\n 2 2021-01-12    6200       0\n 3 2021-01-22   60000       0\n 4 2021-01-27  113000      50\n 5 2021-01-31  155000      50\n 6 2021-02-02  175000    6000\n 7 2021-02-10  250000    6000\n 8 2021-02-18  250000  110000\n 9 2021-03-01  317715  207324\n10 2021-03-04  350000  215000\n\n\n\n\n3. package rio - export\n(can export to .xlsx or .csv file)\n\nexport(df3, \"../assets//vaccines.csv\")",
    "crumbs": [
      "DataFrames",
      "importExport."
    ]
  },
  {
    "objectID": "dataframes/df-FilterSelectArrange.html",
    "href": "dataframes/df-FilterSelectArrange.html",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/df-FilterSelectArrange.html#dataset",
    "href": "dataframes/df-FilterSelectArrange.html#dataset",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64"
  },
  {
    "objectID": "dataframes/df-FilterSelectArrange.html#choose-rows",
    "href": "dataframes/df-FilterSelectArrange.html#choose-rows",
    "title": "df-FilterSelectArrange",
    "section": "2. Choose Rows",
    "text": "2. Choose Rows\n\nChoose Rows by row number - slice\n\nhead(df,3)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n\ntail(df,3)\n\n      ID Test1 Practical FinalExam\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\nslice(df, 3:6)\n\n     ID Test1 Practical FinalExam\n1 SD103    60        56        74\n2 SD104    78        90        87\n3 SD105    55        87        65\n4 SD106    67        55        66"
  },
  {
    "objectID": "dataframes/df-FilterSelectArrange.html#choose-rows-by-criteria---filter",
    "href": "dataframes/df-FilterSelectArrange.html#choose-rows-by-criteria---filter",
    "title": "df-FilterSelectArrange",
    "section": "Choose Rows by Criteria - filter()",
    "text": "Choose Rows by Criteria - filter()\n\nfilter(df, FinalExam&lt;50)\n\n     ID Test1 Practical FinalExam\n1 SD102    23        23        32\n2 SD108    36        55        43\n\n\n\n3. Choose Columns - select()\n\nnames(df)\n\n[1] \"ID\"        \"Test1\"     \"Practical\" \"FinalExam\"\n\nhead(df)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n4 SD104    78        90        87\n5 SD105    55        87        65\n6 SD106    67        55        66\n\ndf[,3:4]\n\n   Practical FinalExam\n1         45        56\n2         23        32\n3         56        74\n4         90        87\n5         87        65\n6         55        66\n7         88        84\n8         55        43\n9         76        65\n10        60        64\n\nselect(df, c(\"ID\",\"FinalExam\"))\n\n      ID FinalExam\n1  SD101        56\n2  SD102        32\n3  SD103        74\n4  SD104        87\n5  SD105        65\n6  SD106        66\n7  SD107        84\n8  SD108        43\n9  SD109        65\n10 SD110        64"
  },
  {
    "objectID": "dataframes/df-FilterSelectArrange.html#sort-by-column-by-name---arrange",
    "href": "dataframes/df-FilterSelectArrange.html#sort-by-column-by-name---arrange",
    "title": "df-FilterSelectArrange",
    "section": "4. Sort by Column by name - arrange()",
    "text": "4. Sort by Column by name - arrange()\n\narrange(df,desc(FinalExam))\n\n      ID Test1 Practical FinalExam\n1  SD104    78        90        87\n2  SD107    75        88        84\n3  SD103    60        56        74\n4  SD106    67        55        66\n5  SD105    55        87        65\n6  SD109    45        76        65\n7  SD110    56        60        64\n8  SD101    67        45        56\n9  SD108    36        55        43\n10 SD102    23        23        32\n\n\n\n# default for arrange is ascending\nselect(df,c(ID, FinalExam)) |&gt; arrange(FinalExam)\n\n      ID FinalExam\n1  SD102        32\n2  SD108        43\n3  SD101        56\n4  SD110        64\n5  SD105        65\n6  SD109        65\n7  SD106        66\n8  SD103        74\n9  SD107        84\n10 SD104        87"
  },
  {
    "objectID": "dataframes/textEntry.html",
    "href": "dataframes/textEntry.html",
    "title": "textEntry",
    "section": "",
    "text": "1. Using data.frame() from BaseR\n\n# strings indicated in quotes\n\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\")\npgms = c(23,25,14,13)\ndf &lt;- data.frame(sch,pgms)\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: num  23 25 14 13\n\n\n\n\n2. Using a read.table from BaseR\n\n# note that parameters include `header=` and `text=`\n# and so don't need quotes. \n\ndf&lt;-read.table(header = TRUE, text = \"\nsch pgms\nSBIZ 23\nNSHD 25\nSHBS 14\nSST 13\n\")\ndf\n\n   sch pgms\n1 SBIZ   23\n2 NSHD   25\n3 SHBS   14\n4  SST   13\n\nstr(df)\n\n'data.frame':   4 obs. of  2 variables:\n $ sch : chr  \"SBIZ\" \"NSHD\" \"SHBS\" \"SST\"\n $ pgms: int  23 25 14 13\n\n\n\n\n3. Using tibble() from tidyverse\n\nlibrary(tidyverse)\n# quotes required\n\ntb1 &lt;- tibble(\nsch = c(\"SBIZ\",\"NSHD\",\"SHBS\",\"SST\"),\npgms = c(23,25,14,13)  \n)\ntb1\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4a. using trible() - a transposed tibble\n\ntb2&lt;-tribble(\n  ~sch, ~pgms,\n  \"SBIZ\", 23,\n  \"NSHD\", 25,\n  \"SHBS\", 14,\n  \"SST\", 13\n)\ntb2\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13\n\n\n\n\n4b. trible() with date\n\ntb3 &lt;- tribble (\n  ~date, ~weight,\n  \"2020-02-22\", 13,\n  \"2021-03-02\", 15,\n  \"2022-04-11\", 18,\n  \"2023-03-10\", 23\n)\ntb3$date &lt;- as.Date(tb3$date)\ntb3\n\n# A tibble: 4 × 2\n  date       weight\n  &lt;date&gt;      &lt;dbl&gt;\n1 2020-02-22     13\n2 2021-03-02     15\n3 2022-04-11     18\n4 2023-03-10     23\n\n\n\n\n5. Using read_csv from tidyverse::readr\n\nrc &lt;- read_csv(\"sch, pgms\n         SBIZ, 23\n         NSHD, 25\n         SHBS, 14\n         SST,  13\n         \")\nrc\n\n# A tibble: 4 × 2\n  sch    pgms\n  &lt;chr&gt; &lt;dbl&gt;\n1 SBIZ     23\n2 NSHD     25\n3 SHBS     14\n4 SST      13",
    "crumbs": [
      "DataFrames",
      "textEntry"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html",
    "href": "dataframes/filterSelectArrange.html",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#dataset",
    "href": "dataframes/filterSelectArrange.html#dataset",
    "title": "df-FilterSelectArrange",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,43,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#choose-rows",
    "href": "dataframes/filterSelectArrange.html#choose-rows",
    "title": "df-FilterSelectArrange",
    "section": "2 Choose Rows",
    "text": "2 Choose Rows\n\n2.1 Choose Rows by row number - slice\n\nhead(df,3)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n\ntail(df,3)\n\n      ID Test1 Practical FinalExam\n8  SD108    36        55        43\n9  SD109    45        76        65\n10 SD110    56        60        64\n\nslice(df, 3:6)\n\n     ID Test1 Practical FinalExam\n1 SD103    60        56        74\n2 SD104    78        90        87\n3 SD105    55        87        65\n4 SD106    67        55        66\n\ndf[3:6,]\n\n     ID Test1 Practical FinalExam\n3 SD103    60        56        74\n4 SD104    78        90        87\n5 SD105    55        87        65\n6 SD106    67        55        66\n\n\n\n\n\n2.2 Choose Rows by Criteria - filter()\n\nfilter(df, FinalExam&lt;50)\n\n     ID Test1 Practical FinalExam\n1 SD102    23        23        32\n2 SD108    36        55        43",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#choose-rows-by-criteria---filter",
    "href": "dataframes/filterSelectArrange.html#choose-rows-by-criteria---filter",
    "title": "df-FilterSelectArrange",
    "section": "3 Choose Rows by Criteria - filter()",
    "text": "3 Choose Rows by Criteria - filter()\n\nfilter(df, FinalExam&lt;50)\n\n     ID Test1 Practical FinalExam\n1 SD102    23        23        32\n2 SD108    36        55        43",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#sort-by-column-by-name---arrange",
    "href": "dataframes/filterSelectArrange.html#sort-by-column-by-name---arrange",
    "title": "df-FilterSelectArrange",
    "section": "4 4. Sort by Column by name - arrange()",
    "text": "4 4. Sort by Column by name - arrange()\n\narrange(df,desc(FinalExam))\n\n      ID Test1 Practical FinalExam\n1  SD104    78        90        87\n2  SD107    75        88        84\n3  SD103    60        56        74\n4  SD106    67        55        66\n5  SD105    55        87        65\n6  SD109    45        76        65\n7  SD110    56        60        64\n8  SD101    67        45        56\n9  SD108    36        55        43\n10 SD102    23        23        32\n\n\n\n# default for arrange is ascending\nselect(df,c(ID, FinalExam)) |&gt; arrange(FinalExam)\n\n      ID FinalExam\n1  SD102        32\n2  SD108        43\n3  SD101        56\n4  SD110        64\n5  SD105        65\n6  SD109        65\n7  SD106        66\n8  SD103        74\n9  SD107        84\n10 SD104        87",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#choose-columns---select",
    "href": "dataframes/filterSelectArrange.html#choose-columns---select",
    "title": "df-FilterSelectArrange",
    "section": "3 Choose Columns - select()",
    "text": "3 Choose Columns - select()\n\nnames(df)\n\n[1] \"ID\"        \"Test1\"     \"Practical\" \"FinalExam\"\n\nhead(df)\n\n     ID Test1 Practical FinalExam\n1 SD101    67        45        56\n2 SD102    23        23        32\n3 SD103    60        56        74\n4 SD104    78        90        87\n5 SD105    55        87        65\n6 SD106    67        55        66\n\ndf[,3:4]\n\n   Practical FinalExam\n1         45        56\n2         23        32\n3         56        74\n4         90        87\n5         87        65\n6         55        66\n7         88        84\n8         55        43\n9         76        65\n10        60        64\n\ndf %&gt;% select(\"Practical\",\"FinalExam\")\n\n   Practical FinalExam\n1         45        56\n2         23        32\n3         56        74\n4         90        87\n5         87        65\n6         55        66\n7         88        84\n8         55        43\n9         76        65\n10        60        64",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/filterSelectArrange.html#sort-column---arrange",
    "href": "dataframes/filterSelectArrange.html#sort-column---arrange",
    "title": "df-FilterSelectArrange",
    "section": "4 Sort Column - arrange()",
    "text": "4 Sort Column - arrange()\n\narrange(df,desc(FinalExam))\n\n      ID Test1 Practical FinalExam\n1  SD104    78        90        87\n2  SD107    75        88        84\n3  SD103    60        56        74\n4  SD106    67        55        66\n5  SD105    55        87        65\n6  SD109    45        76        65\n7  SD110    56        60        64\n8  SD101    67        45        56\n9  SD108    36        55        43\n10 SD102    23        23        32\n\n\n\n# default for arrange is ascending\ndf %&gt;% \n  select(ID, FinalExam) %&gt;%\n  arrange(FinalExam)\n\n      ID FinalExam\n1  SD102        32\n2  SD108        43\n3  SD101        56\n4  SD110        64\n5  SD105        65\n6  SD109        65\n7  SD106        66\n8  SD103        74\n9  SD107        84\n10 SD104        87\n\n\n\n4.1 Extract Maximum Value of a Column\n\nwhen you pipe function parameter is not the first variable, use dot\n\n\ndf$FinalExam %&gt;%\n  max() %&gt;%\n  str_c(\"Max value = \", .)\n\n[1] \"Max value = 87\"",
    "crumbs": [
      "DataFrames",
      "filterSelectArrange"
    ]
  },
  {
    "objectID": "dataframes/mutate.html",
    "href": "dataframes/mutate.html",
    "title": "mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64",
    "crumbs": [
      "DataFrames",
      "mutate"
    ]
  },
  {
    "objectID": "dataframes/mutate.html#dataset---marks",
    "href": "dataframes/mutate.html#dataset---marks",
    "title": "mutate",
    "section": "",
    "text": "library(tidyverse)\n\nID &lt;- str_c(\"SD\",101:110)\nTest1 &lt;- c(67,23,60,78,55,67,75,36,45,56)\nPractical &lt;- c(45,23,56,90,87,55,88,55,76,60)\nFinalExam &lt;- c(56,32,74,87,65,66,84,53,65,64)\ndf &lt;- data.frame(ID, Test1, Practical, FinalExam)\ndf\n\n      ID Test1 Practical FinalExam\n1  SD101    67        45        56\n2  SD102    23        23        32\n3  SD103    60        56        74\n4  SD104    78        90        87\n5  SD105    55        87        65\n6  SD106    67        55        66\n7  SD107    75        88        84\n8  SD108    36        55        53\n9  SD109    45        76        65\n10 SD110    56        60        64",
    "crumbs": [
      "DataFrames",
      "mutate"
    ]
  },
  {
    "objectID": "dataframes/mutate.html#add-new-calculated-column---mutate",
    "href": "dataframes/mutate.html#add-new-calculated-column---mutate",
    "title": "mutate",
    "section": "2 add new calculated column - mutate",
    "text": "2 add new calculated column - mutate\nThe new column is based on weighted average of: (Test1:20%, Practical:20% and FinalExam:60%).\n\ndf1 &lt;- mutate(df,\n              TotScore = 0.2*Test1+0.2*Practical+0.6*FinalExam)\ndf1\n\n      ID Test1 Practical FinalExam TotScore\n1  SD101    67        45        56     56.0\n2  SD102    23        23        32     28.4\n3  SD103    60        56        74     67.6\n4  SD104    78        90        87     85.8\n5  SD105    55        87        65     67.4\n6  SD106    67        55        66     64.0\n7  SD107    75        88        84     83.0\n8  SD108    36        55        53     50.0\n9  SD109    45        76        65     63.2\n10 SD110    56        60        64     61.6",
    "crumbs": [
      "DataFrames",
      "mutate"
    ]
  },
  {
    "objectID": "dataframes/df-data-pivot.html",
    "href": "dataframes/df-data-pivot.html",
    "title": "df-data-case_match",
    "section": "",
    "text": "Data\n\nlibrary(tidyverse)\ndf &lt;- data.frame(\n  Disease = c(0,0,1,1,0),\n  bioMarker = c(31.9,32.0,39.0,32.3,41.0)\n)\ndf\n\n  Disease bioMarker\n1       0      31.9\n2       0      32.0\n3       1      39.0\n4       1      32.3\n5       0      41.0\n\n\n\n\nUse case_match to recode\n\nreplacing recode function on a vector (not dataframe)\n\n\nlibrary(tidyverse)\ndf$Disease &lt;- case_match(\n                  df$Disease,\n                  0 ~ \"noCancer\",\n                  1 ~ \"Cancer\"\n              )\ndf\n\n   Disease bioMarker\n1 noCancer      31.9\n2 noCancer      32.0\n3   Cancer      39.0\n4   Cancer      32.3\n5 noCancer      41.0"
  },
  {
    "objectID": "dataframes/caseMatch.html",
    "href": "dataframes/caseMatch.html",
    "title": "caseMatch",
    "section": "",
    "text": "library(tidyverse)\ndf &lt;- data.frame(\n  Disease = c(0,0,1,1,0),\n  bioMarker = c(31.9,32.0,39.0,32.3,41.0)\n)\ndf\n\n  Disease bioMarker\n1       0      31.9\n2       0      32.0\n3       1      39.0\n4       1      32.3\n5       0      41.0",
    "crumbs": [
      "DataFrames",
      "caseMatch"
    ]
  },
  {
    "objectID": "dataframes/pivot_longer.html",
    "href": "dataframes/pivot_longer.html",
    "title": "pivot_longer",
    "section": "",
    "text": "library(tidyverse)",
    "crumbs": [
      "DataFrames",
      "pivot_longer"
    ]
  },
  {
    "objectID": "ggplots/basic5.html",
    "href": "ggplots/basic5.html",
    "title": "ggplot-Basics",
    "section": "",
    "text": "Five named plots\n\n\n\n\nscatter: geom_point()\nline : geom_line()\nbar count: geom_bar()\ncolumn: geom_col()\nfrequency: geom_histogram()",
    "crumbs": [
      "ggPlots",
      "basic5"
    ]
  },
  {
    "objectID": "ggplots/basic5.html#data",
    "href": "ggplots/basic5.html#data",
    "title": "ggplot-Basics",
    "section": "Data",
    "text": "Data\n\ngirth &lt;- c(40,45,53,55,63,65,67)\nheight &lt;- c(56.2,33.3,61.2,38.4,47.4,30.0,40.4)\nage &lt;- c(15,18,28,40,55,65,76)\nsex &lt;- c('M','F','M','F','M','M','F')\ndf &lt;- data.frame(girth,height,age,sex)\ndf\n\n  girth height age sex\n1    40   56.2  15   M\n2    45   33.3  18   F\n3    53   61.2  28   M\n4    55   38.4  40   F\n5    63   47.4  55   M\n6    65   30.0  65   M\n7    67   40.4  76   F\n\n\n\n\n\n\n\n\n\n1. Scatter Plot\n\n\n\n\ngeom_point = Scatter Plot\naes(color=sex)\nlab(title,subtitle,xlabel,ylabel)\n\n\n\n\n# 1. Scatter\nlibrary(tidyverse)\nggplot(df, aes(x=girth, y=height, color=sex))+\n  geom_point(size=2)+\n  labs(\n    title=\"1. Scatter Plot\",\n    subtitle=\"Date: 28 Jul 2024\",\n    x = \"Girth(cm)\",\n    y = \"Height(cm)\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. ScatterLines\n\n\n\n\nxlims, ylims\nmarker (attributes from geom_point())\n\n\n\n\n# 2. ScatterLines\nggplot(df)+\n  xlim(0,100)+\n  ylim(0,80)+\n  \n  geom_point(x=age,y=girth,shape=21, size=4,fill=\"orange\",alpha=0.4)+\n  geom_line(aes(x=age,y=girth,color=\"girth\"),show.legend=FALSE)+\n  geom_point(x=age,y=height,shape=21, size=4,fill=\"yellow\")+\n  geom_line(aes(x=age,y=height,color=\"height\"),show.legend=FALSE)+\n  scale_color_manual(values=c(\"red\",\"blue\"))+\n  \n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. BarPlot\n\n\n\n\ncounts categories\nrunif()\n\n\n\n\n\n# barplot\ndirection = c('N','S','E','W','W','E','W','E','E','E','E','S','S','N','N','W','E','E','N','N','N','S','E','W','W','E','W','E','E','E')\nspeed = rnorm(30, 5, 0.2)\ndfWind &lt;- data.frame(direction,speed)\nstr(dfWind)\n\n'data.frame':   30 obs. of  2 variables:\n $ direction: chr  \"N\" \"S\" \"E\" \"W\" ...\n $ speed    : num  5.19 4.93 5.05 5.04 4.81 ...\n\nggplot(dfWind,aes(x=direction, fill=direction))+\n  geom_bar(color=\"gray\")+\n  labs(\n    title=\"3. BarPlot\",\n    subtitle=\"auto counting\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4. ColumnPlot\n\n\n\n\nannotate values : geom_text()\n\n\n\n\nschool &lt;- c(\"NSHD\",\"SHBS\",\"SBIZ\",\"LAW\")\nnumSG &lt;- c(68,140,90,55)\ndf2 &lt;- data.frame(school,numSG)\ndf2\n\n  school numSG\n1   NSHD    68\n2   SHBS   140\n3   SBIZ    90\n4    LAW    55\n\nggplot(df2, aes(x=school, y=numSG, fill=school))+\n  labs(\n    title=\"4.ColumnPlot\",\n   subtitle=\"yValues\")+\n  geom_col(color=\"gray\")+\n  scale_fill_manual(values=c(\"lightgreen\",\"yellow\",\"lightblue\",\"purple\"))+\n  geom_text(aes(label=numSG),nudge_y=10)+\n  ylim(0,180)+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. Histogram\n\n\n\n\ngeom_histogram\nbin\n\n\n\n\n  str(dfWind)\n\n'data.frame':   30 obs. of  2 variables:\n $ direction: chr  \"N\" \"S\" \"E\" \"W\" ...\n $ speed    : num  5.19 4.93 5.05 5.04 4.81 ...\n\n  ggplot(dfWind, aes(x=speed))+\n    geom_histogram(bins = 8, fill=\"lightgray\",color=\"black\")+\n    labs(\n      title=\"5. Histogram\",\n      subtitle = \"bins=8\",\n      xlab = \"Wind Speed\",\n      ylab = \"Frequency\"\n    )",
    "crumbs": [
      "ggPlots",
      "basic5"
    ]
  },
  {
    "objectID": "ggplots/regression.html",
    "href": "ggplots/regression.html",
    "title": "ggplot-Regression",
    "section": "",
    "text": "Regression with ggplot\n\n\n\n\ngeom_smooth\nse=FALSE\nlm(Y~X)",
    "crumbs": [
      "ggPlots",
      "regression"
    ]
  },
  {
    "objectID": "ggplots/regression.html#data",
    "href": "ggplots/regression.html#data",
    "title": "ggplot-Regression",
    "section": "1 Data",
    "text": "1 Data\n\nweight &lt;- c(6.2,7.2,7.6,8.3,8.6,9.2,9.5,10.0,10.4,10.6,11.1,\n            6.9,7.6,8.4,8.8,9.3,9.6,10.1,10.5,10.8,11.4,11.7)\nage &lt;- c(4,6,8,10,12,14,16,18,20,22,24,\n         4,6,8,10,12,14,16,18,20,22,24)\nsex &lt;- c('F','F','F','F','F','F','F','F','F','F','F',\n         'M','M','M','M','M','M','M','M','M','M','M')\ndf &lt;- data.frame(weight,age,sex)\nstr(df)\n\n'data.frame':   22 obs. of  3 variables:\n $ weight: num  6.2 7.2 7.6 8.3 8.6 9.2 9.5 10 10.4 10.6 ...\n $ age   : num  4 6 8 10 12 14 16 18 20 22 ...\n $ sex   : chr  \"F\" \"F\" \"F\" \"F\" ...",
    "crumbs": [
      "ggPlots",
      "regression"
    ]
  },
  {
    "objectID": "ggplots/regression.html#sorted-scatterplot-by-sex",
    "href": "ggplots/regression.html#sorted-scatterplot-by-sex",
    "title": "ggplot-Regression",
    "section": "2 Sorted Scatterplot by sex",
    "text": "2 Sorted Scatterplot by sex\n\ndf1 &lt;- arrange(df,-desc(age))\nggplot(df1, aes(x=age, y=weight,col=sex))+\n  geom_point()",
    "crumbs": [
      "ggPlots",
      "regression"
    ]
  },
  {
    "objectID": "ggplots/regression.html#regression-on-male-data",
    "href": "ggplots/regression.html#regression-on-male-data",
    "title": "ggplot-Regression",
    "section": "3 Regression on male data",
    "text": "3 Regression on male data\n\ndf2 &lt;- df1 %&gt;%\n         filter(sex=='M')\nggplot(df2,aes(x=age,y=weight))+\n  xlim(2,24)+\n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  labs(\n   title=\"Weight for Males\"\n  )\n\n\n\n\n\n\n\nmodel &lt;- lm(weight~age, data=df2)\nsummary(model)\n\n\nCall:\nlm(formula = weight ~ age, data = df2)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.35455 -0.12455  0.02545  0.12545  0.22545 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 6.334545   0.136201   46.51 4.92e-12 ***\nage         0.230000   0.008866   25.94 9.06e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.186 on 9 degrees of freedom\nMultiple R-squared:  0.9868,    Adjusted R-squared:  0.9853 \nF-statistic:   673 on 1 and 9 DF,  p-value: 9.062e-10",
    "crumbs": [
      "ggPlots",
      "regression"
    ]
  },
  {
    "objectID": "ggplots.html",
    "href": "ggplots.html",
    "title": "datatypes",
    "section": "",
    "text": "DataTypes\n\nnumbers\nstrings\nfactors\ndates\nlists\nmatrices\ntables",
    "crumbs": [
      "ggPlots"
    ]
  },
  {
    "objectID": "ggplots/facets.html",
    "href": "ggplots/facets.html",
    "title": "ggPlot-Facets",
    "section": "",
    "text": "ggPlot-facets\n\n\n\n\nfacet_wrap (x, ncol)\nfacet_grid (x,y, ncol, nrows)\nlibrary(tidyverse)",
    "crumbs": [
      "ggPlots",
      "facets"
    ]
  },
  {
    "objectID": "rDatasets/trees/yaml-Sample.html",
    "href": "rDatasets/trees/yaml-Sample.html",
    "title": "Sample Templates",
    "section": "",
    "text": "---\n\ntitle: \"yaml-Sample\"\nwarning: FALSE\nformat: \n  pdf:\n    papersize: B5\n    \n---"
  },
  {
    "objectID": "rDatasets/trees/yaml-Sample.html#yaml-sample",
    "href": "rDatasets/trees/yaml-Sample.html#yaml-sample",
    "title": "Sample Templates",
    "section": "",
    "text": "---\n\ntitle: \"yaml-Sample\"\nwarning: FALSE\nformat: \n  pdf:\n    papersize: B5\n    \n---"
  },
  {
    "objectID": "rDatasets/trees/yaml-Sample.html#r-sample",
    "href": "rDatasets/trees/yaml-Sample.html#r-sample",
    "title": "Sample Templates",
    "section": "R-Sample",
    "text": "R-Sample\n\necho and warning off when loading a library\n---{r}\n\n#| echo: FALSE\n#| warning: FALSE\nlibrary(tidyverse)\n\n---"
  },
  {
    "objectID": "rDatasets/penguins/penguins.html#penguins-dataset",
    "href": "rDatasets/penguins/penguins.html#penguins-dataset",
    "title": "Penguins",
    "section": "Penguins Dataset",
    "text": "Penguins Dataset\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\nDrop Missing or `na.omit()`\n\npenguins &lt;- na.omit(penguins)\n\n\n\nScatterplot\n\nggplot(penguins, aes(x=flipper_length_mm, y=body_mass_g, color=species))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE)+\n  ggtitle(\"Body Mass (gm) of penguins\")\n\n\n\n\n\n\n\n\n\n\n\n\nBox Plots\n\nggplot(penguins, aes(x=species, y=body_mass_g,color=species))+\n  geom_boxplot()+\n  ggtitle(\"Body mass of penguins\")\n\n\n\n\n\n\n\n\n\n\nDensity Plots\n\nlibrary(ggridges)\nggplot(penguins, aes(x=body_mass_g, y=species,fill=species))+\n  geom_density_ridges()+\n  theme_bw()"
  },
  {
    "objectID": "rDatasets/iris/iris.html",
    "href": "rDatasets/iris/iris.html",
    "title": "Iris",
    "section": "",
    "text": "iris-image"
  },
  {
    "objectID": "rDatasets/iris/iris.html#plot-sepal-and-petal-measurements-for-the-3-species",
    "href": "rDatasets/iris/iris.html#plot-sepal-and-petal-measurements-for-the-3-species",
    "title": "Iris",
    "section": "Plot Sepal and Petal measurements for the 3 species",
    "text": "Plot Sepal and Petal measurements for the 3 species\n\ns1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width,color=Species))+\n        geom_point(show.legend=FALSE)+\n        xlim(0,10)+\n        ylim(0,5.0)\np1 &lt;- ggplot(iris, aes(x=Petal.Length, y=Petal.Width,color=Species))+\n        geom_point()\n\nlibrary(patchwork)\n  s1 + p1 +\n    theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "rDatasets/iris/iris.html#boxplot-of-the-petal.length-and-petal.width-across-species",
    "href": "rDatasets/iris/iris.html#boxplot-of-the-petal.length-and-petal.width-across-species",
    "title": "Iris",
    "section": "Boxplot of the Petal.Length and Petal.Width across Species",
    "text": "Boxplot of the Petal.Length and Petal.Width across Species\n\npl &lt;- ggplot(iris, aes(x=Species,y=Petal.Length, color=Species))+\n        geom_boxplot(show.legend=FALSE)+\n        theme_bw()+\n        ylim(0,8)\npw &lt;- ggplot(iris, aes(x=Species,y=Petal.Width, color=Species))+\n        geom_boxplot(show.legend=FALSE)+\n        theme_bw()+\n        ylim(0,8)\n\npl+pw"
  },
  {
    "objectID": "rDatasets/iris/iris.html#pairwise-comparisons",
    "href": "rDatasets/iris/iris.html#pairwise-comparisons",
    "title": "Iris",
    "section": "Pairwise Comparisons",
    "text": "Pairwise Comparisons\n\niris &lt;- iris[sample(1:nrow(iris)),]\nplot(iris, col = iris$Species)\n\n\n\n\n\n\n\n\n\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50"
  },
  {
    "objectID": "rDatasets/iris/iris.html#ggridges-for-density-plots",
    "href": "rDatasets/iris/iris.html#ggridges-for-density-plots",
    "title": "Iris",
    "section": "ggRidges for density plots",
    "text": "ggRidges for density plots\n\nlibrary(ggridges)\n\n\nggplot(iris, aes(x=Petal.Length, y=Species,fill=Species))+\n  geom_density_ridges()+\n  xlim(0,8)+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvline for median\n\n\n\ngeom_density_ridges(quantile_lines=TRUE,quantile=2)\n\n\n\n\n\n\nor just use geom_density()\n\nirisvi &lt;- filter(iris, Species == \"virginica\")\nirisse &lt;- filter(iris, Species == 'setosa')\n\ndvi &lt;- ggplot(irisvi,aes(Sepal.Length))+\n  geom_density(fill=\"lightblue\")+\n  theme_bw()\ndse &lt;- ggplot(irisse,aes(Sepal.Length))+\n  geom_density(fill='pink')+\n  theme_bw()\ndvi+dse"
  },
  {
    "objectID": "rDatasets/iris/iris.html#regression-for-speciesversicolor",
    "href": "rDatasets/iris/iris.html#regression-for-speciesversicolor",
    "title": "Iris",
    "section": "Regression for Species=Versicolor",
    "text": "Regression for Species=Versicolor\n\nirisV &lt;- filter(iris, Species==\"versicolor\")\nhead(irisV)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1          5.5         2.6          4.4         1.2 versicolor\n2          6.3         2.5          4.9         1.5 versicolor\n3          6.8         2.8          4.8         1.4 versicolor\n4          6.0         3.4          4.5         1.6 versicolor\n5          6.6         2.9          4.6         1.3 versicolor\n6          6.7         3.1          4.4         1.4 versicolor"
  },
  {
    "objectID": "rDatasets/iris/iris.html#regressionplot-for-versicolor",
    "href": "rDatasets/iris/iris.html#regressionplot-for-versicolor",
    "title": "Iris",
    "section": "RegressionPlot for versicolor",
    "text": "RegressionPlot for versicolor\n\nggplot(irisV, aes(x=Sepal.Width, y=Sepal.Length))+\n  geom_point(color=\"brown\")+\n  geom_smooth(method=\"lm\",se=FALSE)+\n  ggtitle(\"Simple Regression\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "datasets.html",
    "href": "datasets.html",
    "title": "datasets",
    "section": "",
    "text": "0.1 DataSets\n\niris\npenguins",
    "crumbs": [
      "DataSets"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html",
    "href": "datasets/iris/iris.html",
    "title": "Iris",
    "section": "",
    "text": "iris-image",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#plot-sepal-and-petal-measurements-for-the-3-species",
    "href": "datasets/iris/iris.html#plot-sepal-and-petal-measurements-for-the-3-species",
    "title": "Iris",
    "section": "Plot Sepal and Petal measurements for the 3 species",
    "text": "Plot Sepal and Petal measurements for the 3 species\n\ns1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width,color=Species))+\n        geom_point(show.legend=FALSE)+\n        xlim(0,10)+\n        ylim(0,5.0)\np1 &lt;- ggplot(iris, aes(x=Petal.Length, y=Petal.Width,color=Species))+\n        geom_point()\n\nlibrary(patchwork)\n  s1 + p1 +\n    theme(legend.position=\"bottom\")",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#boxplot-of-the-petal.length-and-petal.width-across-species",
    "href": "datasets/iris/iris.html#boxplot-of-the-petal.length-and-petal.width-across-species",
    "title": "Iris",
    "section": "Boxplot of the Petal.Length and Petal.Width across Species",
    "text": "Boxplot of the Petal.Length and Petal.Width across Species\n\npl &lt;- ggplot(iris, aes(x=Species,y=Petal.Length, color=Species))+\n        geom_boxplot(show.legend=FALSE)+\n        theme_bw()+\n        ylim(0,8)\npw &lt;- ggplot(iris, aes(x=Species,y=Petal.Width, color=Species))+\n        geom_boxplot(show.legend=FALSE)+\n        theme_bw()+\n        ylim(0,8)\n\npl+pw",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#pairwise-comparisons",
    "href": "datasets/iris/iris.html#pairwise-comparisons",
    "title": "Iris",
    "section": "Pairwise Comparisons",
    "text": "Pairwise Comparisons\n\niris &lt;- iris[sample(1:nrow(iris)),]\nplot(iris, col = iris$Species)\n\n\n\n\n\n\n\n\n\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#ggridges-for-density-plots",
    "href": "datasets/iris/iris.html#ggridges-for-density-plots",
    "title": "Iris",
    "section": "ggRidges for density plots",
    "text": "ggRidges for density plots\n\nlibrary(ggridges)\n\n\nggplot(iris, aes(x=Petal.Length, y=Species,fill=Species))+\n  geom_density_ridges()+\n  xlim(0,8)+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvline for median\n\n\n\ngeom_density_ridges(quantile_lines=TRUE,quantile=2)\n\n\n\n\n\n\nor just use geom_density()\n\nirisvi &lt;- filter(iris, Species == \"virginica\")\nirisse &lt;- filter(iris, Species == 'setosa')\n\ndvi &lt;- ggplot(irisvi,aes(Sepal.Length))+\n  geom_density(fill=\"lightblue\")+\n  theme_bw()\ndse &lt;- ggplot(irisse,aes(Sepal.Length))+\n  geom_density(fill='pink')+\n  theme_bw()\ndvi+dse",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#regression-for-speciesversicolor",
    "href": "datasets/iris/iris.html#regression-for-speciesversicolor",
    "title": "Iris",
    "section": "Regression for Species=Versicolor",
    "text": "Regression for Species=Versicolor\n\nirisV &lt;- filter(iris, Species==\"versicolor\")\nhead(irisV)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1          5.2         2.7          3.9         1.4 versicolor\n2          5.7         2.8          4.5         1.3 versicolor\n3          6.3         2.5          4.9         1.5 versicolor\n4          5.9         3.0          4.2         1.5 versicolor\n5          6.8         2.8          4.8         1.4 versicolor\n6          5.6         2.7          4.2         1.3 versicolor",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/iris/iris.html#regressionplot-for-versicolor",
    "href": "datasets/iris/iris.html#regressionplot-for-versicolor",
    "title": "Iris",
    "section": "RegressionPlot for versicolor",
    "text": "RegressionPlot for versicolor\n\nggplot(irisV, aes(x=Sepal.Width, y=Sepal.Length))+\n  geom_point(color=\"brown\")+\n  geom_smooth(method=\"lm\",se=FALSE)+\n  ggtitle(\"Simple Regression\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "DataSets",
      "iris"
    ]
  },
  {
    "objectID": "datasets/trees/yaml-Sample.html",
    "href": "datasets/trees/yaml-Sample.html",
    "title": "Sample Templates",
    "section": "",
    "text": "---\n\ntitle: \"yaml-Sample\"\nwarning: FALSE\nformat: \n  pdf:\n    papersize: B5\n    \n---"
  },
  {
    "objectID": "datasets/trees/yaml-Sample.html#yaml-sample",
    "href": "datasets/trees/yaml-Sample.html#yaml-sample",
    "title": "Sample Templates",
    "section": "",
    "text": "---\n\ntitle: \"yaml-Sample\"\nwarning: FALSE\nformat: \n  pdf:\n    papersize: B5\n    \n---"
  },
  {
    "objectID": "datasets/trees/yaml-Sample.html#r-sample",
    "href": "datasets/trees/yaml-Sample.html#r-sample",
    "title": "Sample Templates",
    "section": "R-Sample",
    "text": "R-Sample\n\necho and warning off when loading a library\n---{r}\n\n#| echo: FALSE\n#| warning: FALSE\nlibrary(tidyverse)\n\n---"
  },
  {
    "objectID": "datasets/penguins/penguinClassification.html",
    "href": "datasets/penguins/penguinClassification.html",
    "title": "penguin Classifier",
    "section": "",
    "text": "library(tidyverse)\ntheme_set(theme_bw())"
  },
  {
    "objectID": "datasets/penguins/penguinClassification.html#build-a-model",
    "href": "datasets/penguins/penguinClassification.html#build-a-model",
    "title": "penguin Classifier",
    "section": "Build a model",
    "text": "Build a model\n\nlibrary(tidymodels)\n\nset.seed(123)\npenguin_split &lt;- initial_split(penguins_df,strata=sex)\npenguin_train &lt;- training(penguin_split)\npenguin_test &lt;- testing(penguin_split)\n\nset.seed(234)\npenguin_boot &lt;- bootstraps(penguin_train)\npenguin_boot\n\n# Bootstrap sampling \n# A tibble: 25 × 2\n   splits           id         \n   &lt;list&gt;           &lt;chr&gt;      \n 1 &lt;split [249/92]&gt; Bootstrap01\n 2 &lt;split [249/99]&gt; Bootstrap02\n 3 &lt;split [249/94]&gt; Bootstrap03\n 4 &lt;split [249/97]&gt; Bootstrap04\n 5 &lt;split [249/93]&gt; Bootstrap05\n 6 &lt;split [249/90]&gt; Bootstrap06\n 7 &lt;split [249/86]&gt; Bootstrap07\n 8 &lt;split [249/92]&gt; Bootstrap08\n 9 &lt;split [249/90]&gt; Bootstrap09\n10 &lt;split [249/89]&gt; Bootstrap10\n# ℹ 15 more rows\n\n\n\nglm_spec &lt;- logistic_reg()%&gt;%\n  set_engine(\"glm\") \n\nrf_spec &lt;- rand_forest() %&gt;%\n  set_mode(\"classification\") %&gt;%\n  set_engine(\"ranger\")\n\n\npenguin_wf &lt;- workflow() %&gt;%\n  add_formula(sex ~ .)\n\npenguin_wf\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: None\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nsex ~ .\n\n\n\nglm_rs &lt;- penguin_wf %&gt;%\n  add_model(glm_spec) %&gt;%\n  fit_resamples(\n    resamples = penguin_boot,\n    control=control_resamples(save_pred=TRUE, verbose=TRUE)\n  )\n\nrf_rs &lt;- penguin_wf %&gt;%\n  add_model(rf_spec) %&gt;%\n  fit_resamples(\n    resamples=penguin_boot,\n    control=control_resamples(save_pred=TRUE,verbose=TRUE)\n  )\n\n\nEvaluate modeling\n\ncollect_metrics(rf_rs)\n\n# A tibble: 3 × 6\n  .metric     .estimator   mean     n std_err .config             \n  &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary     0.925     25 0.00467 Preprocessor1_Model1\n2 brier_class binary     0.0604    25 0.00222 Preprocessor1_Model1\n3 roc_auc     binary     0.980     25 0.00188 Preprocessor1_Model1\n\n\n\ncollect_metrics(glm_rs)\n\n# A tibble: 3 × 6\n  .metric     .estimator   mean     n std_err .config             \n  &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary     0.917     25 0.00481 Preprocessor1_Model1\n2 brier_class binary     0.0603    25 0.00388 Preprocessor1_Model1\n3 roc_auc     binary     0.977     25 0.00471 Preprocessor1_Model1\n\n\n\nglm_rs %&gt;%\n  conf_mat_resampled()\n\n# A tibble: 4 × 3\n  Prediction Truth   Freq\n  &lt;fct&gt;      &lt;fct&gt;  &lt;dbl&gt;\n1 female     female 40.8 \n2 female     male    3.8 \n3 male       female  3.76\n4 male       male   43.1 \n\n\n\nglm_rs %&gt;%\n  collect_predictions() %&gt;%\n  group_by(id) %&gt;%\n  roc_curve(sex, .pred_female)%&gt;%\n  autoplot()"
  },
  {
    "objectID": "datasets/trees/trees.html",
    "href": "datasets/trees/trees.html",
    "title": "BaseR: trees",
    "section": "",
    "text": "trees\n\n\n\n\ntidymodels\nbroom"
  },
  {
    "objectID": "datasets/trees/trees.html#dataset",
    "href": "datasets/trees/trees.html#dataset",
    "title": "BaseR: trees",
    "section": "Dataset",
    "text": "Dataset\n\ntreesDF &lt;- data.frame(trees)\nstr(trees)\n\n'data.frame':   31 obs. of  3 variables:\n $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n\n\n\n\nstr(trees)\n\nfunction (range = c(1L, 2000L), trans = NULL)"
  },
  {
    "objectID": "datasets/penguins/penguins.html#penguins-dataset",
    "href": "datasets/penguins/penguins.html#penguins-dataset",
    "title": "Penguins",
    "section": "Penguins Dataset",
    "text": "Penguins Dataset\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\nDrop Missing or `na.omit()`\n\npenguins &lt;- na.omit(penguins)\n\n\n\nScatterplot\n\nggplot(penguins, aes(x=flipper_length_mm, y=body_mass_g, color=species))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE)+\n  ggtitle(\"Body Mass (gm) of penguins\")\n\n\n\n\n\n\n\n\n\n\n\n\nBox Plots\n\nggplot(penguins, aes(x=species, y=body_mass_g,color=species))+\n  geom_boxplot()+\n  ggtitle(\"Body mass of penguins\")\n\n\n\n\n\n\n\n\n\n\nDensity Plots\n\nlibrary(ggridges)\nggplot(penguins, aes(x=body_mass_g, y=species,fill=species))+\n  geom_density_ridges()+\n  theme_bw()",
    "crumbs": [
      "DataSets",
      "penguins"
    ]
  },
  {
    "objectID": "ggplots/facets.html#data",
    "href": "ggplots/facets.html#data",
    "title": "ggPlot-Facets",
    "section": "1 Data",
    "text": "1 Data\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nIn order to do facet plot across variables Sepal.Length, Sepal.Width, Petal.Length and Petal.Width, we need to reshape the data to pivot_longer.\n\ncol_order&lt;- c(\"Species\",\"Sepal.Length\",\"Sepal.Width\",\n                        \"Petal.Length\",\"Petal.Width\")\nirisA &lt;- iris[,col_order]\nhead(irisA)\n\n  Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  setosa          5.1         3.5          1.4         0.2\n2  setosa          4.9         3.0          1.4         0.2\n3  setosa          4.7         3.2          1.3         0.2\n4  setosa          4.6         3.1          1.5         0.2\n5  setosa          5.0         3.6          1.4         0.2\n6  setosa          5.4         3.9          1.7         0.4\n\niris_long &lt;- irisA %&gt;%\n  pivot_longer(\n  !Species, \n  names_to = \"Leaves\",\n  values_to =\"cm\")\nhead(iris_long)\n\n# A tibble: 6 × 3\n  Species Leaves          cm\n  &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1 setosa  Sepal.Length   5.1\n2 setosa  Sepal.Width    3.5\n3 setosa  Petal.Length   1.4\n4 setosa  Petal.Width    0.2\n5 setosa  Sepal.Length   4.9\n6 setosa  Sepal.Width    3",
    "crumbs": [
      "ggPlots",
      "facets"
    ]
  },
  {
    "objectID": "ggplots/facets.html#facet_wrap",
    "href": "ggplots/facets.html#facet_wrap",
    "title": "ggPlot-Facets",
    "section": "2 facet_wrap",
    "text": "2 facet_wrap\n\nwraps a 1-d ribbon of panels into 2-d\nto specify number of columns (ncol=3) or number of rows (nrow=2) in a panel layout.\n\n\np &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\np+facet_wrap(~Leaves, ncol=2)",
    "crumbs": [
      "ggPlots",
      "facets"
    ]
  },
  {
    "objectID": "ggplots/facets.html#facet_grid",
    "href": "ggplots/facets.html#facet_grid",
    "title": "ggPlot-Facets",
    "section": "3 facet_grid",
    "text": "3 facet_grid\n\nproduces 2-d grid of panels defined by variables for rows and columns.\n\n\nq &lt;- ggplot(iris_long, aes(x=Species, y=cm))+\n  geom_boxplot(aes(fill=Species))\nq + facet_grid(cols = vars(Leaves))",
    "crumbs": [
      "ggPlots",
      "facets"
    ]
  },
  {
    "objectID": "dataframes/caseMatch.html#data",
    "href": "dataframes/caseMatch.html#data",
    "title": "caseMatch",
    "section": "",
    "text": "library(tidyverse)\ndf &lt;- data.frame(\n  Disease = c(0,0,1,1,0),\n  bioMarker = c(31.9,32.0,39.0,32.3,41.0)\n)\ndf\n\n  Disease bioMarker\n1       0      31.9\n2       0      32.0\n3       1      39.0\n4       1      32.3\n5       0      41.0",
    "crumbs": [
      "DataFrames",
      "caseMatch"
    ]
  },
  {
    "objectID": "dataframes/caseMatch.html#use-case_match-to-recode",
    "href": "dataframes/caseMatch.html#use-case_match-to-recode",
    "title": "caseMatch",
    "section": "2 Use case_match to recode",
    "text": "2 Use case_match to recode\n\nreplacing recode function on a vector (not dataframe)\n\n\nlibrary(tidyverse)\ndf$Disease &lt;- case_match(\n                  df$Disease,\n                  0 ~ \"noCancer\",\n                  1 ~ \"Cancer\"\n              )\ndf\n\n   Disease bioMarker\n1 noCancer      31.9\n2 noCancer      32.0\n3   Cancer      39.0\n4   Cancer      32.3\n5 noCancer      41.0",
    "crumbs": [
      "DataFrames",
      "caseMatch"
    ]
  },
  {
    "objectID": "dataframes/pivot_longer.html#examples-of-pivot_longer",
    "href": "dataframes/pivot_longer.html#examples-of-pivot_longer",
    "title": "data-pivot_longer",
    "section": "1 Examples of pivot_longer",
    "text": "1 Examples of pivot_longer",
    "crumbs": [
      "DataFrames",
      "pivot_longer"
    ]
  },
  {
    "objectID": "dataframes/pivot_longer.html#data1---students",
    "href": "dataframes/pivot_longer.html#data1---students",
    "title": "pivot_longer",
    "section": "2 Data1 - students",
    "text": "2 Data1 - students\n\nstudents &lt;- data.frame(\n  name = c(\"Alice\",\"Bob\",\"Charles\"),\n  math = c(90,85,92),\n  science = c(95,88,91),\n  history = c(87,92,78)\n)\nstudents\n\n     name math science history\n1   Alice   90      95      87\n2     Bob   85      88      92\n3 Charles   92      91      78\n\n\n\nstudents_long &lt;- students %&gt;%\n  pivot_longer(\n    !name,\n    names_to = \"subject\",\n    values_to = \"score\"\n)\nstudents_long\n\n# A tibble: 9 × 3\n  name    subject score\n  &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;\n1 Alice   math       90\n2 Alice   science    95\n3 Alice   history    87\n4 Bob     math       85\n5 Bob     science    88\n6 Bob     history    92\n7 Charles math       92\n8 Charles science    91\n9 Charles history    78",
    "crumbs": [
      "DataFrames",
      "pivot_longer"
    ]
  },
  {
    "objectID": "dataframes/pivot_longer.html#data2---iris",
    "href": "dataframes/pivot_longer.html#data2---iris",
    "title": "pivot_longer",
    "section": "3 Data2 - iris",
    "text": "3 Data2 - iris\n\n# move Species to the first column\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\niris1 &lt;- iris[,c(5,1,2,3,4)]\nhead(iris1)\n\n  Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1  setosa          5.1         3.5          1.4         0.2\n2  setosa          4.9         3.0          1.4         0.2\n3  setosa          4.7         3.2          1.3         0.2\n4  setosa          4.6         3.1          1.5         0.2\n5  setosa          5.0         3.6          1.4         0.2\n6  setosa          5.4         3.9          1.7         0.4\n\n\n\niris_long &lt;- iris1 %&gt;%\n  pivot_longer(\n    !Species,\n    names_to = \"Leaf\",\n    values_to = \"cm\"\n  )\nhead(iris_long)\n\n# A tibble: 6 × 3\n  Species Leaf            cm\n  &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n1 setosa  Sepal.Length   5.1\n2 setosa  Sepal.Width    3.5\n3 setosa  Petal.Length   1.4\n4 setosa  Petal.Width    0.2\n5 setosa  Sepal.Length   4.9\n6 setosa  Sepal.Width    3",
    "crumbs": [
      "DataFrames",
      "pivot_longer"
    ]
  },
  {
    "objectID": "dataframes/pivot_longer.html#libraries",
    "href": "dataframes/pivot_longer.html#libraries",
    "title": "pivot_longer",
    "section": "",
    "text": "library(tidyverse)",
    "crumbs": [
      "DataFrames",
      "pivot_longer"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References\n\nIsmay, C., and A. Y. Kim. 2019. Statistical Inference via Data Science: A ModernDive into r and the Tidyverse. https://doi.org/10.1201/9780367409913: Chapman; Hall/CRC.\n\n\nKuhn, Max, and Julia Silge. 2022. Tidy Modeling with r. \" O’Reilly Media, Inc.\".\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2nd ed. \" O’Reilly Media, Inc.\".",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "YAML.html",
    "href": "YAML.html",
    "title": "Introduction",
    "section": "",
    "text": "For each chapter and section, the YAML config is as follows:\n\n---\ntitle: \"Introduction\"\nformat: html\neditor: visual\nwarning: FALSE\nnumber-sections: true\n---\n\n\nthe _quarto.yml file list the side bar menu items\n\n---\nproject:\n  type: website\n\nwebsite:\n  title: \"WebR\"\n  page-navigation: true\n  sidebar:\n    search: true\n    contents:\n      - text: Introduction \n        href: index.qmd\n        contents: \n           - text: YAML\n             href: yaml.qmd\n           - text: Workflow\n             href: workflow.qmd\n      - section: \"Datatypes\"\n        href: datatypes.qmd\n        contents:\n          - text: numbers\n            href: datatypes/numbers.qmd\n          - text: strings\n            href: datatypes/strings.qmd\n...\n---"
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "workflow",
    "section": "",
    "text": "edited on Rstudio under QuartoWeb/WebR\nProject under Rstudio is WebR.Rproj\nhtml files under WebR/_site\nthese files are copied to github repository\nurl is github.io/ykwong/webR\nsynchronize with rsync",
    "crumbs": [
      "Introduction",
      "Workflow"
    ]
  },
  {
    "objectID": "yaml.html",
    "href": "yaml.html",
    "title": "Introduction",
    "section": "",
    "text": "For each chapter and section, the YAML config is as follows:\n\n---\ntitle: \"Introduction\"\nformat: html\neditor: visual\nwarning: FALSE\nnumber-sections: true\n---\n\n\nthe _quarto.yml file list the side bar menu items\n\n---\nproject:\n  type: website\n\nwebsite:\n  title: \"WebR\"\n  page-navigation: true\n  sidebar:\n    search: true\n    contents:\n      - text: Introduction \n        href: index.qmd\n        contents: \n           - text: YAML\n             href: yaml.qmd\n           - text: Workflow\n             href: workflow.qmd\n      - section: \"Datatypes\"\n        href: datatypes.qmd\n        contents:\n          - text: numbers\n            href: datatypes/numbers.qmd\n          - text: strings\n            href: datatypes/strings.qmd\n...\n---"
  }
]